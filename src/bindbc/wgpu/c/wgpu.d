/*
Copyright (c) 2019-2025 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module bindbc.wgpu.c.wgpu;

import bindbc.wgpu.c.webgpu;

/*
 * Type definitions from wgpu.h
 */
enum WGPUNativeSType
{
    // Start at 0003 since that's allocated range for wgpu-native
    DeviceExtras = 0x00030001,
    NativeLimits = 0x00030002,
    PipelineLayoutExtras = 0x00030003,
    ShaderSourceGLSL = 0x00030004,
    InstanceExtras = 0x00030006,
    BindGroupEntryExtras = 0x00030007,
    BindGroupLayoutEntryExtras = 0x00030008,
    QuerySetDescriptorExtras = 0x00030009,
    SurfaceConfigurationExtras = 0x0003000A,
    Force32 = 0x7FFFFFFF
}

enum WGPUNativeFeature
{
    PushConstants = 0x00030001,
    TextureAdapterSpecificFormatFeatures = 0x00030002,
    MultiDrawIndirect = 0x00030003,
    MultiDrawIndirectCount = 0x00030004,
    VertexWritableStorage = 0x00030005,
    TextureBindingArray = 0x00030006,
    SampledTextureAndStorageBufferArrayNonUniformIndexing = 0x00030007,
    PipelineStatisticsQuery = 0x00030008,
    StorageResourceBindingArray = 0x00030009,
    PartiallyBoundBindingArray = 0x0003000A,
    TextureFormat16bitNorm = 0x0003000B,
    TextureCompressionAstcHdr = 0x0003000C,
    MappablePrimaryBuffers = 0x0003000E,
    BufferBindingArray = 0x0003000F,
    UniformBufferAndStorageTextureArrayNonUniformIndexing = 0x00030010,
    // TODO: requires wgpu.h api change
    // AddressModeClampToZero = 0x00030011,
    // AddressModeClampToBorder = 0x00030012,
    // PolygonModeLine = 0x00030013,
    // PolygonModePoint = 0x00030014,
    // ConservativeRasterization = 0x00030015,
    // ClearTexture = 0x00030016,
    SpirvShaderPassthrough = 0x00030017,
    // Multiview = 0x00030018,
    VertexAttribute64bit = 0x00030019,
    TextureFormatNv12 = 0x0003001A,
    RayTracingAccelerationStructure = 0x0003001B,
    RayQuery = 0x0003001C,
    ShaderF64 = 0x0003001D,
    ShaderI16 = 0x0003001E,
    ShaderPrimitiveIndex = 0x0003001F,
    ShaderEarlyDepthTest = 0x00030020,
    Subgroup = 0x00030021,
    SubgroupVertex = 0x00030022,
    SubgroupBarrier = 0x00030023,
    TimestampQueryInsideEncoders = 0x00030024,
    TimestampQueryInsidePasses = 0x00030025,
    Force32 = 0x7FFFFFFF
}

enum WGPULogLevel
{
    Off = 0x00000000,
    Error = 0x00000001,
    Warn = 0x00000002,
    Info = 0x00000003,
    Debug = 0x00000004,
    Trace = 0x00000005,
    Force32 = 0x7FFFFFFF
}

enum WGPUInstanceBackend: WGPUFlags
{
    All = 0x00000000,
    Vulkan = 1 << 0,
    GL = 1 << 1,
    Metal = 1 << 2,
    DX12 = 1 << 3,
    DX11 = 1 << 4,
    BrowserWebGPU = 1 << 5,
    Primary = (1 << 0) | (1 << 2) | (1 << 3) | (1 << 5), // Vulkan, Metal, DX12 and BrowserWebGPU
    Secondary = (1 << 1) | (1 << 4), // GL and DX11
    Force32 = 0x7FFFFFFF
}

enum WGPUInstanceFlag: WGPUFlags
{
    Default = 0x00000000,
    Debug = 1 << 0,
    Validation = 1 << 1,
    DiscardHalLabels = 1 << 2,
    Force32 = 0x7FFFFFFF
}

enum WGPUDx12Compiler
{
    Undefined = 0x00000000,
    Fxc = 0x00000001,
    Dxc = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUGles3MinorVersion {
    Automatic = 0x00000000,
    Version0 = 0x00000001,
    Version1 = 0x00000002,
    Version2 = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUPipelineStatisticName
{
    VertexShaderInvocations = 0x00000000,
    ClipperInvocations = 0x00000001,
    ClipperPrimitivesOut = 0x00000002,
    FragmentShaderInvocations = 0x00000003,
    ComputeShaderInvocations = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUNativeQueryType
{
    PipelineStatistics = 0x00030000,
    Force32 = 0x7FFFFFFF
}

enum WGPUDxcMaxShaderModel
{
    V6_0 = 0x00000000,
    V6_1 = 0x00000001,
    V6_2 = 0x00000002,
    V6_3 = 0x00000003,
    V6_4 = 0x00000004,
    V6_5 = 0x00000005,
    V6_6 = 0x00000006,
    V6_7 = 0x00000007,
    Force32 = 0x7FFFFFFF
}

enum WGPUGLFenceBehaviour
{
    Normal = 0x00000000,
    AutoFinish = 0x00000001,
    Force32 = 0x7FFFFFFF
}

struct WGPUInstanceExtras
{
    WGPUChainedStruct chain;
    WGPUInstanceBackend backends;
    WGPUInstanceFlag flags;
    WGPUDx12Compiler dx12ShaderCompiler;
    WGPUGles3MinorVersion gles3MinorVersion;
    WGPUGLFenceBehaviour glFenceBehaviour;
    WGPUStringView dxilPath;
    WGPUStringView dxcPath;
    WGPUDxcMaxShaderModel dxcMaxShaderModel;
}

struct WGPUDeviceExtras
{
    WGPUChainedStruct chain;
    WGPUStringView tracePath;
}

struct WGPUNativeLimits
{
    WGPUChainedStructOut chain;
    uint maxPushConstantSize;
    uint maxNonSamplerBindings;
}

struct WGPUPushConstantRange
{
    WGPUShaderStage stages;
    uint start;
    uint end;
}

struct WGPUPipelineLayoutExtras
{
    WGPUChainedStruct chain;
    size_t pushConstantRangeCount;
    const(WGPUPushConstantRange)* pushConstantRanges;
}

alias WGPUSubmissionIndex = ulong;

struct WGPUShaderDefine
{
    WGPUStringView name;
    WGPUStringView value;
}

struct WGPUShaderSourceGLSL
{
    WGPUChainedStruct chain;
    WGPUShaderStage stage;
    WGPUStringView code;
    uint defineCount;
    WGPUShaderDefine* defines;
}

struct WGPUShaderModuleDescriptorSpirV
{
    WGPUStringView label;
    uint sourceSize;
    const(uint)* source;
}

struct WGPURegistryReport
{
   size_t numAllocated;
   size_t numKeptFromUser;
   size_t numReleasedFromUser;
   size_t elementSize;
}

struct WGPUHubReport
{
    WGPURegistryReport adapters;
    WGPURegistryReport devices;
    WGPURegistryReport queues;
    WGPURegistryReport pipelineLayouts;
    WGPURegistryReport shaderModules;
    WGPURegistryReport bindGroupLayouts;
    WGPURegistryReport bindGroups;
    WGPURegistryReport commandBuffers;
    WGPURegistryReport renderBundles;
    WGPURegistryReport renderPipelines;
    WGPURegistryReport computePipelines;
    WGPURegistryReport pipelineCaches;
    WGPURegistryReport querySets;
    WGPURegistryReport buffers;
    WGPURegistryReport textures;
    WGPURegistryReport textureViews;
    WGPURegistryReport samplers;
}

struct WGPUGlobalReport
{
    WGPURegistryReport surfaces;
    WGPUHubReport hub;
}

struct WGPUInstanceEnumerateAdapterOptions
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUInstanceBackend backends;
}

struct WGPUBindGroupEntryExtras
{
    WGPUChainedStruct chain;
    const(WGPUBuffer)* buffers;
    size_t bufferCount;
    const(WGPUSampler)* samplers;
    size_t samplerCount;
    const(WGPUTextureView)* textureViews;
    size_t textureViewCount;
}

struct WGPUBindGroupLayoutEntryExtras
{
    WGPUChainedStruct chain;
    uint count;
}

struct WGPUQuerySetDescriptorExtras
{
    WGPUChainedStruct chain;
    const(WGPUPipelineStatisticName)* pipelineStatistics;
    size_t pipelineStatisticCount;
}

struct WGPUSurfaceConfigurationExtras
{
    WGPUChainedStruct chain;
    uint desiredMaximumFrameLatency;
}

extern(C)
{
    alias WGPULogCallback = void function(WGPULogLevel level, WGPUStringView message, void* userdata);
}

enum WGPUNativeTextureFormat
{
    R16Unorm = 0x00030001,
    R16Snorm = 0x00030002,
    Rg16Unorm = 0x00030003,
    Rg16Snorm = 0x00030004,
    Rgba16Unorm = 0x00030005,
    Rgba16Snorm = 0x00030006,
    NV12 = 0x00030007
}
