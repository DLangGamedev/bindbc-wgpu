/*
Copyright (c) 2019-2025 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module bindbc.wgpu.c.proc;

import bindbc.wgpu.c.webgpu;
import bindbc.wgpu.c.wgpu;

/*
 * Procedure definitions from webgpu.h and wgpu.h
 */
extern(C) @nogc nothrow:

alias WGPUProcCreateInstance = WGPUInstance function(const(WGPUInstanceDescriptor)* descriptor);
alias WGPUProcGetInstanceCapabilities = WGPUStatus function(WGPUInstanceCapabilities* capabilities);
alias WGPUProcGetProcAddress = WGPUProc function(WGPUStringView procName);

// Procs of Adapter
alias WGPUProcAdapterGetFeatures = void function(WGPUAdapter adapter, WGPUSupportedFeatures* features);
alias WGPUProcAdapterGetInfo = WGPUStatus function(WGPUAdapter adapter, WGPUAdapterInfo* info);
alias WGPUProcAdapterGetLimits = WGPUStatus function(WGPUAdapter adapter, WGPULimits* limits);
alias WGPUProcAdapterHasFeature = WGPUBool function(WGPUAdapter adapter, WGPUFeatureName feature);
alias WGPUProcAdapterRequestDevice = WGPUFuture function(WGPUAdapter adapter, const(WGPUDeviceDescriptor)* descriptor, WGPURequestDeviceCallbackInfo callbackInfo);
alias WGPUProcAdapterAddRef = void function(WGPUAdapter adapter);
alias WGPUProcAdapterRelease = void function(WGPUAdapter adapter);

// Procs of AdapterInfo
alias WGPUProcAdapterInfoFreeMembers = void function(WGPUAdapterInfo adapterInfo);

// Procs of BindGroup
alias WGPUProcBindGroupSetLabel = void function(WGPUBindGroup bindGroup, WGPUStringView label);
alias WGPUProcBindGroupAddRef = void function(WGPUBindGroup bindGroup);
alias WGPUProcBindGroupRelease = void function(WGPUBindGroup bindGroup);

// Procs of BindGroupLayout
alias WGPUProcBindGroupLayoutSetLabel = void function(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label);
alias WGPUProcBindGroupLayoutAddRef = void function(WGPUBindGroupLayout bindGroupLayout);
alias WGPUProcBindGroupLayoutRelease = void function(WGPUBindGroupLayout bindGroupLayout);

// Procs of Buffer
alias WGPUProcBufferDestroy = void function(WGPUBuffer buffer);
alias WGPUProcBufferGetConstMappedRange = const(void)* function(WGPUBuffer buffer, size_t offset, size_t size);
alias WGPUProcBufferGetMapState = WGPUBufferMapState function(WGPUBuffer buffer);
alias WGPUProcBufferGetMappedRange = void* function(WGPUBuffer buffer, size_t offset, size_t size);
alias WGPUProcBufferGetSize = size_t function(WGPUBuffer buffer);
alias WGPUProcBufferGetUsage = WGPUBufferUsage function(WGPUBuffer buffer);
alias WGPUProcBufferMapAsync = WGPUFuture function(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo);
alias WGPUProcBufferSetLabel = void function (WGPUBuffer buffer, WGPUStringView label);
alias WGPUProcBufferUnmap = void function(WGPUBuffer buffer);
alias WGPUProcBufferAddRef = void function(WGPUBuffer buffer);
alias WGPUProcBufferRelease = void function(WGPUBuffer buffer);

// Procs of CommandBuffer
alias WGPUProcCommandBufferSetLabel = void function(WGPUCommandBuffer commandBuffer, WGPUStringView label);
alias WGPUProcCommandBufferAddRef = void function(WGPUCommandBuffer commandBuffer);
alias WGPUProcCommandBufferRelease = void function(WGPUCommandBuffer commandBuffer);

// Procs of CommandEncoder
alias WGPUProcCommandEncoderBeginComputePass = WGPUComputePassEncoder* function(WGPUCommandEncoder commandEncoder, const(WGPUComputePassDescriptor)* descriptor);
alias WGPUProcCommandEncoderBeginRenderPass = WGPURenderPassEncoder* function(WGPUCommandEncoder commandEncoder, const(WGPURenderPassDescriptor)* descriptor);
alias WGPUProcCommandEncoderClearBuffer = void function(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, ulong offset, ulong size);
alias WGPUProcCommandEncoderCopyBufferToBuffer = void function(WGPUCommandEncoder commandEncoder, WGPUBuffer source, ulong sourceOffset, WGPUBuffer destination, ulong destinationOffset, ulong size);
alias WGPUProcCommandEncoderCopyBufferToTexture = void function(WGPUCommandEncoder commandEncoder, const(WGPUTexelCopyBufferInfo)* source, const(WGPUTexelCopyTextureInfo)* destination, const(WGPUExtent3D)* copySize);
alias WGPUProcCommandEncoderCopyTextureToBuffer = void function(WGPUCommandEncoder commandEncoder, const(WGPUTexelCopyTextureInfo)* source, const(WGPUTexelCopyBufferInfo)* destination, const(WGPUExtent3D)* copySize);
alias WGPUProcCommandEncoderCopyTextureToTexture = void function(WGPUCommandEncoder commandEncoder, const(WGPUTexelCopyTextureInfo)* source, const(WGPUTexelCopyTextureInfo)* destination, const(WGPUExtent3D)* copySize);
alias WGPUProcCommandEncoderFinish = WGPUCommandBuffer function(WGPUCommandEncoder commandEncoder, const(WGPUCommandBufferDescriptor)* descriptor);
alias WGPUProcCommandEncoderInsertDebugMarker = void function(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel);
alias WGPUProcCommandEncoderPopDebugGroup = void function(WGPUCommandEncoder commandEncoder);
alias WGPUProcCommandEncoderPushDebugGroup = void function(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel);
alias WGPUProcCommandEncoderResolveQuerySet = void function(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint firstQuery, uint queryCount, WGPUBuffer destination, ulong destinationOffset);
alias WGPUProcCommandEncoderSetLabel = void function(WGPUCommandEncoder commandEncoder, WGPUStringView label);
alias WGPUProcCommandEncoderWriteTimestamp = void function(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint queryIndex);
alias WGPUProcCommandEncoderAddRef = void function(WGPUCommandEncoder commandEncoder);
alias WGPUProcCommandEncoderRelease = void function(WGPUCommandEncoder commandEncoder);

// Procs of ComputePassEncoder
alias WGPUProcComputePassEncoderDispatchWorkgroups = void function(WGPUComputePassEncoder computePassEncoder, uint workgroupCountX, uint workgroupCountY, uint workgroupCountZ);
alias WGPUProcComputePassEncoderDispatchWorkgroupsIndirect = void function(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcComputePassEncoderEnd = void function(WGPUComputePassEncoder computePassEncoder);
alias WGPUProcComputePassEncoderInsertDebugMarker = void function(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel);
alias WGPUProcComputePassEncoderPopDebugGroup = void function(WGPUComputePassEncoder computePassEncoder);
alias WGPUProcComputePassEncoderPushDebugGroup = void function(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel);
alias WGPUProcComputePassEncoderSetBindGroup = void function(WGPUComputePassEncoder computePassEncoder, uint groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const(uint)* dynamicOffsets);
alias WGPUProcComputePassEncoderSetLabel = void function(WGPUComputePassEncoder computePassEncoder, WGPUStringView label);
alias WGPUProcComputePassEncoderSetPipeline = void function(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline);
alias WGPUProcComputePassEncoderAddRef = void function(WGPUComputePassEncoder computePassEncoder);
alias WGPUProcComputePassEncoderRelease = void function(WGPUComputePassEncoder computePassEncoder);

// Procs of ComputePipeline
alias WGPUProcComputePipelineGetBindGroupLayout = WGPUBindGroupLayout* function(WGPUComputePipeline computePipeline, uint groupIndex);
alias WGPUProcComputePipelineSetLabel = void function(WGPUComputePipeline computePipeline, WGPUStringView label);
alias WGPUProcComputePipelineAddRef = void function(WGPUComputePipeline computePipeline);
alias WGPUProcComputePipelineRelease = void function(WGPUComputePipeline computePipeline);

// Procs of Device
alias WGPUProcDeviceCreateBindGroup = WGPUBindGroup function(WGPUDevice device, const(WGPUBindGroupDescriptor)* descriptor);
alias WGPUProcDeviceCreateBindGroupLayout = WGPUBindGroupLayout function(WGPUDevice device, const(WGPUBindGroupLayoutDescriptor)* descriptor);
alias WGPUProcDeviceCreateBuffer = WGPUBuffer function(WGPUDevice device, const(WGPUBufferDescriptor)* descriptor);
alias WGPUProcDeviceCreateCommandEncoder = WGPUCommandEncoder function(WGPUDevice device, const(WGPUCommandEncoderDescriptor)* descriptor);
alias WGPUProcDeviceCreateComputePipeline = WGPUComputePipeline function(WGPUDevice device, const(WGPUComputePipelineDescriptor)* descriptor);
alias WGPUProcDeviceCreateComputePipelineAsync = WGPUFuture function(WGPUDevice device, const(WGPUComputePipelineDescriptor)* descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo);
alias WGPUProcDeviceCreatePipelineLayout = WGPUPipelineLayout function(WGPUDevice device, const(WGPUPipelineLayoutDescriptor)* descriptor);
alias WGPUProcDeviceCreateQuerySet = WGPUQuerySet function(WGPUDevice device, const(WGPUQuerySetDescriptor)* descriptor);
alias WGPUProcDeviceCreateRenderBundleEncoder = WGPURenderBundleEncoder function(WGPUDevice device, const(WGPURenderBundleEncoderDescriptor)* descriptor);
alias WGPUProcDeviceCreateRenderPipeline = WGPURenderPipeline function(WGPUDevice device, const(WGPURenderPipelineDescriptor)* descriptor);
alias WGPUProcDeviceCreateRenderPipelineAsync = WGPUFuture function(WGPUDevice device, const(WGPURenderPipelineDescriptor)* descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo);
alias WGPUProcDeviceCreateSampler = WGPUSampler function(WGPUDevice device, const(WGPUSamplerDescriptor)* descriptor);
alias WGPUProcDeviceCreateShaderModule = WGPUShaderModule function(WGPUDevice device, const(WGPUShaderModuleDescriptor)* descriptor);
alias WGPUProcDeviceCreateTexture = WGPUTexture function(WGPUDevice device, const(WGPUTextureDescriptor)* descriptor);
alias WGPUProcDeviceDestroy = void function(WGPUDevice device);
alias WGPUProcDeviceGetAdapterInfo = WGPUAdapterInfo function(WGPUDevice device);
alias WGPUProcDeviceGetFeatures = void function(WGPUDevice device, WGPUSupportedFeatures* features);
alias WGPUProcDeviceGetLimits = WGPUStatus function(WGPUDevice device, WGPULimits* limits);
alias WGPUProcDeviceGetLostFuture = WGPUFuture function(WGPUDevice device);
alias WGPUProcDeviceGetQueue = WGPUQueue function(WGPUDevice device);
alias WGPUProcDeviceHasFeature = WGPUBool function(WGPUDevice device, WGPUFeatureName feature);
alias WGPUProcDevicePopErrorScope = WGPUFuture function(WGPUDevice device, WGPUPopErrorScopeCallbackInfo callbackInfo);
alias WGPUProcDevicePushErrorScope = void function(WGPUDevice device, WGPUErrorFilter filter);
alias WGPUProcDeviceSetLabel = void function(WGPUDevice device, WGPUStringView label);
alias WGPUProcDeviceAddRef = void function(WGPUDevice device);
alias WGPUProcDeviceRelease = void function(WGPUDevice device);

// Procs of Instance
alias WGPUProcInstanceCreateSurface = WGPUSurface function(WGPUInstance instance, const(WGPUSurfaceDescriptor)* descriptor);
alias WGPUProcInstanceGetWGSLLanguageFeatures = WGPUStatus function(WGPUInstance instance, WGPUSupportedWGSLLanguageFeatures* features);
alias WGPUProcInstanceHasWGSLLanguageFeature = WGPUBool function(WGPUInstance instance, WGPUWGSLLanguageFeatureName feature);
alias WGPUProcInstanceProcessEvents = void function(WGPUInstance instance);
alias WGPUProcInstanceRequestAdapter = WGPUFuture function(WGPUInstance instance, const(WGPURequestAdapterOptions)* options, WGPURequestAdapterCallbackInfo callbackInfo);
alias WGPUProcInstanceWaitAny = WGPUWaitStatus function(WGPUInstance instance, size_t futureCount, WGPUFutureWaitInfo* futures, ulong timeoutNS);
alias WGPUProcInstanceAddRef = void function(WGPUInstance instance);
alias WGPUProcInstanceRelease = void function(WGPUInstance instance);

// Procs of PipelineLayout
alias WGPUProcPipelineLayoutSetLabel = void function(WGPUPipelineLayout pipelineLayout, WGPUStringView label);
alias WGPUProcPipelineLayoutAddRef = void function(WGPUPipelineLayout pipelineLayout);
alias WGPUProcPipelineLayoutRelease = void function(WGPUPipelineLayout pipelineLayout);

// Procs of QuerySet
alias WGPUProcQuerySetDestroy = void function(WGPUQuerySet querySet);
alias WGPUProcQuerySetGetCount = uint function(WGPUQuerySet querySet);
alias WGPUProcQuerySetGetType = WGPUQueryType function(WGPUQuerySet querySet);
alias WGPUProcQuerySetSetLabel = void function(WGPUQuerySet querySet, WGPUStringView label);
alias WGPUProcQuerySetAddRef = void function(WGPUQuerySet querySet);
alias WGPUProcQuerySetRelease = void function(WGPUQuerySet querySet);

// Procs of Queue
alias WGPUProcQueueOnSubmittedWorkDone = WGPUFuture function(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo callbackInfo);
alias WGPUProcQueueSetLabel = void function(WGPUQueue queue, WGPUStringView label);
alias WGPUProcQueueSubmit = void function(WGPUQueue queue, size_t commandCount, const(WGPUCommandBuffer)* commands);
alias WGPUProcQueueWriteBuffer = void function(WGPUQueue queue, WGPUBuffer buffer, ulong bufferOffset, const(void)* data, size_t size);
alias WGPUProcQueueWriteTexture = void function(WGPUQueue queue, const(WGPUTexelCopyTextureInfo)* destination, const(void)* data, size_t dataSize, const(WGPUTexelCopyBufferLayout)* dataLayout, const(WGPUExtent3D)* writeSize);
alias WGPUProcQueueAddRef = void function(WGPUQueue queue);
alias WGPUProcQueueRelease = void function(WGPUQueue queue);

// Procs of RenderBundle
alias WGPUProcRenderBundleSetLabel = void function(WGPURenderBundle renderBundle, WGPUStringView label);
alias WGPUProcRenderBundleAddRef = void function(WGPURenderBundle renderBundle);
alias WGPUProcRenderBundleRelease = void function(WGPURenderBundle renderBundle);

// Procs of RenderBundleEncoder
alias WGPUProcRenderBundleEncoderDraw = void function(WGPURenderBundleEncoder renderBundleEncoder, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
alias WGPUProcRenderBundleEncoderDrawIndexed = void function(WGPURenderBundleEncoder renderBundleEncoder, uint indexCount, uint instanceCount, uint firstIndex, int baseVertex, uint firstInstance);
alias WGPUProcRenderBundleEncoderDrawIndexedIndirect = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcRenderBundleEncoderDrawIndirect = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcRenderBundleEncoderFinish = WGPURenderBundle* function(WGPURenderBundleEncoder renderBundleEncoder, const(WGPURenderBundleDescriptor)* descriptor);
alias WGPUProcRenderBundleEncoderInsertDebugMarker = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel);
alias WGPUProcRenderBundleEncoderPopDebugGroup = void function(WGPURenderBundleEncoder renderBundleEncoder);
alias WGPUProcRenderBundleEncoderPushDebugGroup = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel);
alias WGPUProcRenderBundleEncoderSetBindGroup = void function(WGPURenderBundleEncoder renderBundleEncoder, uint groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const(uint)* dynamicOffsets);
alias WGPUProcRenderBundleEncoderSetIndexBuffer = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, ulong offset, ulong size);
alias WGPUProcRenderBundleEncoderSetLabel = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView label);
alias WGPUProcRenderBundleEncoderSetPipeline = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline);
alias WGPUProcRenderBundleEncoderSetVertexBuffer = void function(WGPURenderBundleEncoder renderBundleEncoder, uint slot, WGPUBuffer buffer, ulong offset, ulong size);
alias WGPUProcRenderBundleEncoderAddRef = void function(WGPURenderBundleEncoder renderBundleEncoder);
alias WGPUProcRenderBundleEncoderRelease = void function(WGPURenderBundleEncoder renderBundleEncoder);

// Procs of RenderPassEncoder
alias WGPUProcRenderPassEncoderBeginOcclusionQuery = void function(WGPURenderPassEncoder renderPassEncoder, uint queryIndex);
alias WGPUProcRenderPassEncoderDraw = void function(WGPURenderPassEncoder renderPassEncoder, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
alias WGPUProcRenderPassEncoderDrawIndexed = void function(WGPURenderPassEncoder renderPassEncoder, uint indexCount, uint instanceCount, uint firstIndex, int baseVertex, uint firstInstance);
alias WGPUProcRenderPassEncoderDrawIndexedIndirect = void function(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcRenderPassEncoderDrawIndirect = void function(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcRenderPassEncoderEnd = void function(WGPURenderPassEncoder renderPassEncoder);
alias WGPUProcRenderPassEncoderEndOcclusionQuery = void function(WGPURenderPassEncoder renderPassEncoder);
alias WGPUProcRenderPassEncoderExecuteBundles = void function(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, const(WGPURenderBundle)* bundles);
alias WGPUProcRenderPassEncoderInsertDebugMarker = void function(WGPURenderPassEncoder renderPassEncoder, WGPUStringView markerLabel);
alias WGPUProcRenderPassEncoderPopDebugGroup = void function(WGPURenderPassEncoder renderPassEncoder);
alias WGPUProcRenderPassEncoderPushDebugGroup = void function(WGPURenderPassEncoder renderPassEncoder, WGPUStringView groupLabel);
alias WGPUProcRenderPassEncoderSetBindGroup = void function(WGPURenderPassEncoder renderPassEncoder, uint groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const(uint)* dynamicOffsets);
alias WGPUProcRenderPassEncoderSetBlendConstant = void function(WGPURenderPassEncoder renderPassEncoder, const(WGPUColor)* color);
alias WGPUProcRenderPassEncoderSetIndexBuffer = void function(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, ulong offset, ulong size);
alias WGPUProcRenderPassEncoderSetLabel = void function(WGPURenderPassEncoder renderPassEncoder, WGPUStringView label);
alias WGPUProcRenderPassEncoderSetPipeline = void function(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline);
alias WGPUProcRenderPassEncoderSetScissorRect = void function(WGPURenderPassEncoder renderPassEncoder, uint x, uint y, uint width, uint height);
alias WGPUProcRenderPassEncoderSetStencilReference = void function(WGPURenderPassEncoder renderPassEncoder, uint reference);
alias WGPUProcRenderPassEncoderSetVertexBuffer = void function(WGPURenderPassEncoder renderPassEncoder, uint slot, WGPUBuffer buffer, ulong offset, ulong size);
alias WGPUProcRenderPassEncoderSetViewport = void function(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);
alias WGPUProcRenderPassEncoderAddRef = void function(WGPURenderPassEncoder renderPassEncoder);
alias WGPUProcRenderPassEncoderRelease = void function(WGPURenderPassEncoder renderPassEncoder);

// Procs of RenderPipeline
alias WGPUProcRenderPipelineGetBindGroupLayout = WGPUBindGroupLayout* function(WGPURenderPipeline renderPipeline, uint groupIndex);
alias WGPUProcRenderPipelineSetLabel = void function(WGPURenderPipeline renderPipeline, WGPUStringView label);
alias WGPUProcRenderPipelineAddRef = void function(WGPURenderPipeline renderPipeline);
alias WGPUProcRenderPipelineRelease = void function(WGPURenderPipeline renderPipeline);

// Procs of Sampler
alias WGPUProcSamplerSetLabel = void function(WGPUSampler sampler, WGPUStringView label);
alias WGPUProcSamplerAddRef = void function(WGPUSampler sampler);
alias WGPUProcSamplerRelease = void function(WGPUSampler sampler);

// Procs of ShaderModule
alias WGPUProcShaderModuleGetCompilationInfo = WGPUFuture function(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo);
alias WGPUProcShaderModuleSetLabel = void function(WGPUShaderModule shaderModule, WGPUStringView label);
alias WGPUProcShaderModuleAddRef = void function(WGPUShaderModule shaderModule);
alias WGPUProcShaderModuleRelease = void function(WGPUShaderModule shaderModule);

// Procs of SupportedFeatures
alias WGPUProcSupportedFeaturesFreeMembers = void function(WGPUSupportedFeatures supportedFeatures);

// Procs of SupportedWGSLLanguageFeatures
alias WGPUProcSupportedWGSLLanguageFeaturesFreeMembers = void function(WGPUSupportedWGSLLanguageFeatures supportedWGSLLanguageFeatures);

// Procs of Surface
alias WGPUProcSurfaceConfigure = void function(WGPUSurface surface, const(WGPUSurfaceConfiguration)* config);
alias WGPUProcSurfaceGetCapabilities = WGPUStatus function(WGPUSurface surface, WGPUAdapter adapter, WGPUSurfaceCapabilities* capabilities);
alias WGPUProcSurfaceGetCurrentTexture = void function(WGPUSurface surface, WGPUSurfaceTexture* surfaceTexture);
alias WGPUProcSurfacePresent = WGPUStatus function (WGPUSurface surface);
alias WGPUProcSurfaceSetLabel = void function(WGPUSurface surface, WGPUStringView label);
alias WGPUProcSurfaceUnconfigure = void function(WGPUSurface surface);
alias WGPUProcSurfaceAddRef = void function(WGPUSurface surface);
alias WGPUProcSurfaceRelease = void function(WGPUSurface surface);

// Procs of SurfaceCapabilities
alias WGPUProcSurfaceCapabilitiesFreeMembers = void function(WGPUSurfaceCapabilities surfaceCapabilities);

// Procs of Texture
alias WGPUProcTextureCreateView = WGPUTextureView function(WGPUTexture texture, const(WGPUTextureViewDescriptor)* descriptor);
alias WGPUProcTextureDestroy = void function(WGPUTexture texture);
alias WGPUProcTextureGetDepthOrArrayLayers = uint function(WGPUTexture texture);
alias WGPUProcTextureGetDimension = WGPUTextureDimension function(WGPUTexture texture);
alias WGPUProcTextureGetFormat = WGPUTextureFormat function(WGPUTexture texture);
alias WGPUProcTextureGetHeight = uint function(WGPUTexture texture);
alias WGPUProcTextureGetMipLevelCount = uint function(WGPUTexture texture);
alias WGPUProcTextureGetSampleCount = uint function(WGPUTexture texture);
alias WGPUProcTextureGetUsage = WGPUTextureUsage function(WGPUTexture texture);
alias WGPUProcTextureGetWidth = uint function(WGPUTexture texture);
alias WGPUProcTextureSetLabel = void function(WGPUTexture texture, WGPUStringView label);
alias WGPUProcTextureAddRef = void function(WGPUTexture texture);
alias WGPUProcTextureRelease = void function(WGPUTexture texture);

// Procs of TextureView
alias WGPUProcTextureViewSetLabel = void function(WGPUTextureView textureView, WGPUStringView label);
alias WGPUProcTextureViewAddRef = void function(WGPUTextureView textureView);
alias WGPUProcTextureViewRelease = void function(WGPUTextureView textureView);

// Procs from wgpu.h
alias WGPUProcGenerateReport = void function(WGPUInstance instance, WGPUGlobalReport* report);
alias WGPUProcInstanceEnumerateAdapters = size_t function(WGPUInstance instance, const(WGPUInstanceEnumerateAdapterOptions)* options, WGPUAdapter* adapters);
alias WGPUProcQueueSubmitForIndex = WGPUSubmissionIndex function(WGPUQueue queue, size_t commandCount, const(WGPUCommandBuffer)* commands);
alias WGPUProcDevicePoll = WGPUBool function(WGPUDevice device, WGPUBool wait, const(WGPUSubmissionIndex)* wrappedSubmissionIndex);
alias WGPUProcDeviceCreateShaderModuleSpirV = WGPUShaderModule function(WGPUDevice device, const(WGPUShaderModuleDescriptorSpirV)* descriptor);
alias WGPUProcSetLogCallback = void function(WGPULogCallback callback, void* userdata);
alias WGPUProcSetLogLevel = void function(WGPULogLevel level);
alias WGPUProcGetVersion = uint function();
alias WGPUProcRenderPassEncoderSetPushConstants = void function(WGPURenderPassEncoder encoder, WGPUShaderStage stages, uint offset, uint sizeBytes, const(void)* data);
alias WGPUProcComputePassEncoderSetPushConstants = void function(WGPUComputePassEncoder encoder, uint offset, uint sizeBytes, const(void)* data);
alias WGPUProcRenderBundleEncoderSetPushConstants = void function(WGPURenderBundleEncoder encoder, WGPUShaderStage stages, uint offset, uint sizeBytes, const(void)* data);
alias WGPUProcRenderPassEncoderMultiDrawIndirect = void function(WGPURenderPassEncoder encoder, WGPUBuffer buffer, ulong offset, uint count);
alias WGPUProcRenderPassEncoderMultiDrawIndexedIndirect = void function(WGPURenderPassEncoder encoder, WGPUBuffer buffer, ulong offset, uint count);
alias WGPUProcRenderPassEncoderMultiDrawIndirectCount = void function(WGPURenderPassEncoder encoder, WGPUBuffer buffer, ulong offset, WGPUBuffer count_buffer, ulong count_buffer_offset, uint max_count);
alias WGPUProcRenderPassEncoderMultiDrawIndexedIndirectCount = void function(WGPURenderPassEncoder encoder, WGPUBuffer buffer, ulong offset, WGPUBuffer count_buffer, ulong count_buffer_offset, uint max_count);
alias WGPUProcComputePassEncoderBeginPipelineStatisticsQuery = void function(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint queryIndex);
alias WGPUProcComputePassEncoderEndPipelineStatisticsQuery = void function(WGPUComputePassEncoder computePassEncoder);
alias WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery = void function(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint queryIndex);
alias WGPUProcRenderPassEncoderEndPipelineStatisticsQuery = void function(WGPURenderPassEncoder renderPassEncoder);
alias WGPUProcComputePassEncoderWriteTimestamp = void function(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint queryIndex);
alias WGPUProcRenderPassEncoderWriteTimestamp = void function(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint queryIndex);
