/*
Copyright (c) 2019-2025 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module bindbc.wgpu.types;

import core.stdc.stdint;

/*
 * Type definitions from webgpu.h
 */

enum uint WGPU_ARRAY_LAYER_COUNT_UNDEFINED = uint.max;
enum uint WGPU_COPY_STRIDE_UNDEFINED = uint.max;
enum uint WGPU_DEPTH_SLICE_UNDEFINED = uint.max;
enum uint WGPU_LIMIT_U32_UNDEFINED = uint.max;
enum ulong WGPU_LIMIT_U64_UNDEFINED = ulong.max;
enum uint WGPU_MIP_LEVEL_COUNT_UNDEFINED = uint.max;
enum uint WGPU_QUERY_SET_INDEX_UNDEFINED = uint.max;
enum size_t WGPU_WHOLE_MAP_SIZE = SIZE_MAX;
enum ulong WGPU_WHOLE_SIZE = ulong.max;

alias WGPUFlags = ulong;
alias WGPUBool = uint;

struct WGPUStringView
{
    const(char)* data; // nullable
    size_t length;
    
    this(const(char)* data, size_t length)
    {
        this.data = data;
        this.length = length;
    }
    
    this(string s)
    {
        data = s.ptr;
        length = s.length;
    }
    
    string toString()
    {
        return cast(string)data[0..length];
    }
}

enum size_t WGPU_STRLEN = SIZE_MAX;

enum WGPU_STRING_VIEW_INIT = WGPUStringView(null, WGPU_STRLEN);

alias WGPUAdapter = void*;
alias WGPUBindGroup = void*;
alias WGPUBindGroupLayout = void*;
alias WGPUBuffer = void*;
alias WGPUCommandBuffer = void*;
alias WGPUCommandEncoder = void*;
alias WGPUComputePassEncoder = void*;
alias WGPUComputePipeline = void*;
alias WGPUDevice = void*;
alias WGPUInstance = void*;
alias WGPUPipelineLayout = void*;
alias WGPUQuerySet = void*;
alias WGPUQueue = void*;
alias WGPURenderBundle = void*;
alias WGPURenderBundleEncoder = void*;
alias WGPURenderPassEncoder = void*;
alias WGPURenderPipeline = void*;
alias WGPUSampler = void*;
alias WGPUShaderModule = void*;
alias WGPUSurface = void*;
alias WGPUTexture = void*;
alias WGPUTextureView = void*;

enum WGPUAdapterType
{
    DiscreteGPU = 0x00000001,
    IntegratedGPU = 0x00000002,
    CPU = 0x00000003,
    Unknown = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUAddressMode
{
    Undefined = 0x00000000,
    ClampToEdge = 0x00000001,
    Repeat = 0x00000002,
    MirrorRepeat = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUBackendType
{
    Undefined = 0x00000000,
    Null = 0x00000001,
    WebGPU = 0x00000002,
    D3D11 = 0x00000003,
    D3D12 = 0x00000004,
    Metal = 0x00000005,
    Vulkan = 0x00000006,
    OpenGL = 0x00000007,
    OpenGLES = 0x00000008,
    Force32 = 0x7FFFFFFF
}

enum WGPUBlendFactor
{
    Undefined = 0x00000000,
    Zero = 0x00000001,
    One = 0x00000002,
    Src = 0x00000003,
    OneMinusSrc = 0x00000004,
    SrcAlpha = 0x00000005,
    OneMinusSrcAlpha = 0x00000006,
    Dst = 0x00000007,
    OneMinusDst = 0x00000008,
    DstAlpha = 0x00000009,
    OneMinusDstAlpha = 0x0000000A,
    SrcAlphaSaturated = 0x0000000B,
    Constant = 0x0000000C,
    OneMinusConstant = 0x0000000D,
    Src1 = 0x0000000E,
    OneMinusSrc1 = 0x0000000F,
    Src1Alpha = 0x00000010,
    OneMinusSrc1Alpha = 0x00000011,
    Force32 = 0x7FFFFFFF
}

enum WGPUBlendOperation
{
    Undefined = 0x00000000,
    Add = 0x00000001,
    Subtract = 0x00000002,
    ReverseSubtract = 0x00000003,
    Min = 0x00000004,
    Max = 0x00000005,
    Force32 = 0x7FFFFFFF
}

enum WGPUBufferBindingType
{
    BindingNotUsed = 0x00000000,
    Undefined = 0x00000001,
    Uniform = 0x00000002,
    Storage = 0x00000003,
    ReadOnlyStorage = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUBufferMapState
{
    Unmapped = 0x00000001,
    Pending = 0x00000002,
    Mapped = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUCallbackMode
{
    WaitAnyOnly = 0x00000001,
    AllowProcessEvents = 0x00000002,
    AllowSpontaneous = 0x00000003,
    Force32 = 0x7FFFFFFF
} 

enum WGPUCompareFunction
{
    Undefined = 0x00000000,
    Never = 0x00000001,
    Less = 0x00000002,
    Equal = 0x00000003,
    LessEqual = 0x00000004,
    Greater = 0x00000005,
    NotEqual = 0x00000006,
    GreaterEqual = 0x00000007,
    Always = 0x00000008,
    Force32 = 0x7FFFFFFF
}

enum WGPUCompilationInfoRequestStatus
{
    Success = 0x00000001,
    InstanceDropped = 0x00000002,
    Error = 0x00000003,
    Unknown = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUCompilationMessageType
{
    Error = 0x00000001,
    Warning = 0x00000002,
    Info = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUCompositeAlphaMode
{
    Auto = 0x00000000,
    Opaque = 0x00000001,
    Premultiplied = 0x00000002,
    Unpremultiplied = 0x00000003,
    Inherit = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUCreatePipelineAsyncStatus
{
    Success = 0x00000001,
    InstanceDropped = 0x00000002,
    ValidationError = 0x00000003,
    InternalError = 0x00000004,
    Unknown = 0x00000005,
    Force32 = 0x7FFFFFFF
}

enum WGPUCullMode
{
    Undefined = 0x00000000,
    None = 0x00000001,
    Front = 0x00000002,
    Back = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUDeviceLostReason
{
    Unknown = 0x00000001,
    Destroyed = 0x00000002,
    InstanceDropped = 0x00000003,
    FailedCreation = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUErrorFilter
{
    Validation = 0x00000001,
    OutOfMemory = 0x00000002,
    Internal = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUErrorType
{
    NoError = 0x00000001,
    Validation = 0x00000002,
    OutOfMemory = 0x00000003,
    Internal = 0x00000004,
    Unknown = 0x00000005,
    Force32 = 0x7FFFFFFF
}

enum WGPUFeatureLevel
{
    Compatibility = 0x00000001,
    Core = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUFeatureName
{
    Undefined = 0x00000000,
    DepthClipControl = 0x00000001,
    Depth32FloatStencil8 = 0x00000002,
    TimestampQuery = 0x00000003,
    TextureCompressionBC = 0x00000004,
    TextureCompressionBCSliced3D = 0x00000005,
    TextureCompressionETC2 = 0x00000006,
    TextureCompressionASTC = 0x00000007,
    TextureCompressionASTCSliced3D = 0x00000008,
    IndirectFirstInstance = 0x00000009,
    ShaderF16 = 0x0000000A,
    RG11B10UfloatRenderable = 0x0000000B,
    BGRA8UnormStorage = 0x0000000C,
    Float32Filterable = 0x0000000D,
    Float32Blendable = 0x0000000E,
    ClipDistances = 0x0000000F,
    DualSourceBlending = 0x00000010,
    Force32 = 0x7FFFFFFF
}

enum WGPUFilterMode
{
    Undefined = 0x00000000,
    Nearest = 0x00000001,
    Linear = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUFrontFace
{
    Undefined = 0x00000000,
    CCW = 0x00000001,
    CW = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUIndexFormat
{
    Undefined = 0x00000000,
    Uint16 = 0x00000001,
    Uint32 = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPULoadOp
{
    Undefined = 0x00000000,
    Load = 0x00000001,
    Clear = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUMapAsyncStatus
{
    Success = 0x00000001,
    InstanceDropped = 0x00000002,
    Error = 0x00000003,
    Aborted = 0x00000004,
    Unknown = 0x00000005,
    Force32 = 0x7FFFFFFF
}

enum WGPUMipmapFilterMode
{
    Undefined = 0x00000000,
    Nearest = 0x00000001,
    Linear = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUOptionalBool
{
    False = 0x00000000,
    True = 0x00000001,
    Undefined = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUPopErrorScopeStatus
{
    Success = 0x00000001,
    InstanceDropped = 0x00000002,
    EmptyStack = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUPowerPreference
{
    Undefined = 0x00000000,
    LowPower = 0x00000001,
    HighPerformance = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUPresentMode
{
    Undefined = 0x00000000,
    Fifo = 0x00000001,
    FifoRelaxed = 0x00000002,
    Immediate = 0x00000003,
    Mailbox = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUPrimitiveTopology
{
    Undefined = 0x00000000,
    PointList = 0x00000001,
    LineList = 0x00000002,
    LineStrip = 0x00000003,
    TriangleList = 0x00000004,
    TriangleStrip = 0x00000005,
    Force32 = 0x7FFFFFFF
}

enum WGPUQueryType
{
    Occlusion = 0x00000001,
    Timestamp = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUQueueWorkDoneStatus
{
    Success = 0x00000001,
    InstanceDropped = 0x00000002,
    Error = 0x00000003,
    Unknown = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPURequestAdapterStatus
{
    Success = 0x00000001,
    InstanceDropped = 0x00000002,
    Unavailable = 0x00000003,
    Error = 0x00000004,
    Unknown = 0x00000005,
    Force32 = 0x7FFFFFFF
}

enum WGPURequestDeviceStatus
{
    Success = 0x00000001,
    InstanceDropped = 0x00000002,
    Error = 0x00000003,
    Unknown = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUSType
{
    ShaderSourceSPIRV = 0x00000001,
    ShaderSourceWGSL = 0x00000002,
    RenderPassMaxDrawCount = 0x00000003,
    SurfaceSourceMetalLayer = 0x00000004,
    SurfaceSourceWindowsHWND = 0x00000005,
    SurfaceSourceXlibWindow = 0x00000006,
    SurfaceSourceWaylandSurface = 0x00000007,
    SurfaceSourceAndroidNativeWindow = 0x00000008,
    SurfaceSourceXCBWindow = 0x00000009,
    Force32 = 0x7FFFFFFF
}

enum WGPUSamplerBindingType
{
    BindingNotUsed = 0x00000000,
    Undefined = 0x00000001,
    Filtering = 0x00000002,
    NonFiltering = 0x00000003,
    Comparison = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUStatus
{
    Success = 0x00000001,
    Error = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUStencilOperation
{
    Undefined = 0x00000000,
    Keep = 0x00000001,
    Zero = 0x00000002,
    Replace = 0x00000003,
    Invert = 0x00000004,
    IncrementClamp = 0x00000005,
    DecrementClamp = 0x00000006,
    IncrementWrap = 0x00000007,
    DecrementWrap = 0x00000008,
    Force32 = 0x7FFFFFFF
}

enum WGPUStorageTextureAccess
{
    BindingNotUsed = 0x00000000,
    Undefined = 0x00000001,
    WriteOnly = 0x00000002,
    ReadOnly = 0x00000003,
    ReadWrite = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUStoreOp
{
    Undefined = 0x00000000,
    Store = 0x00000001,
    Discard = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUSurfaceGetCurrentTextureStatus
{
    SuccessOptimal = 0x00000001,
    SuccessSuboptimal = 0x00000002,
    Timeout = 0x00000003,
    Outdated = 0x00000004,
    Lost = 0x00000005,
    OutOfMemory = 0x00000006,
    DeviceLost = 0x00000007,
    Error = 0x00000008,
    Force32 = 0x7FFFFFFF
}

enum WGPUTextureAspect
{
    Undefined = 0x00000000,
    All = 0x00000001,
    StencilOnly = 0x00000002,
    DepthOnly = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUTextureDimension
{
    Undefined = 0x00000000,
    D1 = 0x00000001,
    D2 = 0x00000002,
    D3 = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUTextureFormat
{
    Undefined = 0x00000000,
    R8Unorm = 0x00000001,
    R8Snorm = 0x00000002,
    R8Uint = 0x00000003,
    R8Sint = 0x00000004,
    R16Uint = 0x00000005,
    R16Sint = 0x00000006,
    R16Float = 0x00000007,
    RG8Unorm = 0x00000008,
    RG8Snorm = 0x00000009,
    RG8Uint = 0x0000000A,
    RG8Sint = 0x0000000B,
    R32Float = 0x0000000C,
    R32Uint = 0x0000000D,
    R32Sint = 0x0000000E,
    RG16Uint = 0x0000000F,
    RG16Sint = 0x00000010,
    RG16Float = 0x00000011,
    RGBA8Unorm = 0x00000012,
    RGBA8UnormSrgb = 0x00000013,
    RGBA8Snorm = 0x00000014,
    RGBA8Uint = 0x00000015,
    RGBA8Sint = 0x00000016,
    BGRA8Unorm = 0x00000017,
    BGRA8UnormSrgb = 0x00000018,
    RGB10A2Uint = 0x00000019,
    RGB10A2Unorm = 0x0000001A,
    RG11B10Ufloat = 0x0000001B,
    RGB9E5Ufloat = 0x0000001C,
    RG32Float = 0x0000001D,
    RG32Uint = 0x0000001E,
    RG32Sint = 0x0000001F,
    RGBA16Uint = 0x00000020,
    RGBA16Sint = 0x00000021,
    RGBA16Float = 0x00000022,
    RGBA32Float = 0x00000023,
    RGBA32Uint = 0x00000024,
    RGBA32Sint = 0x00000025,
    Stencil8 = 0x00000026,
    Depth16Unorm = 0x00000027,
    Depth24Plus = 0x00000028,
    Depth24PlusStencil8 = 0x00000029,
    Depth32Float = 0x0000002A,
    Depth32FloatStencil8 = 0x0000002B,
    BC1RGBAUnorm = 0x0000002C,
    BC1RGBAUnormSrgb = 0x0000002D,
    BC2RGBAUnorm = 0x0000002E,
    BC2RGBAUnormSrgb = 0x0000002F,
    BC3RGBAUnorm = 0x00000030,
    BC3RGBAUnormSrgb = 0x00000031,
    BC4RUnorm = 0x00000032,
    BC4RSnorm = 0x00000033,
    BC5RGUnorm = 0x00000034,
    BC5RGSnorm = 0x00000035,
    BC6HRGBUfloat = 0x00000036,
    BC6HRGBFloat = 0x00000037,
    BC7RGBAUnorm = 0x00000038,
    BC7RGBAUnormSrgb = 0x00000039,
    ETC2RGB8Unorm = 0x0000003A,
    ETC2RGB8UnormSrgb = 0x0000003B,
    ETC2RGB8A1Unorm = 0x0000003C,
    ETC2RGB8A1UnormSrgb = 0x0000003D,
    ETC2RGBA8Unorm = 0x0000003E,
    ETC2RGBA8UnormSrgb = 0x0000003F,
    EACR11Unorm = 0x00000040,
    EACR11Snorm = 0x00000041,
    EACRG11Unorm = 0x00000042,
    EACRG11Snorm = 0x00000043,
    ASTC4x4Unorm = 0x00000044,
    ASTC4x4UnormSrgb = 0x00000045,
    ASTC5x4Unorm = 0x00000046,
    ASTC5x4UnormSrgb = 0x00000047,
    ASTC5x5Unorm = 0x00000048,
    ASTC5x5UnormSrgb = 0x00000049,
    ASTC6x5Unorm = 0x0000004A,
    ASTC6x5UnormSrgb = 0x0000004B,
    ASTC6x6Unorm = 0x0000004C,
    ASTC6x6UnormSrgb = 0x0000004D,
    ASTC8x5Unorm = 0x0000004E,
    ASTC8x5UnormSrgb = 0x0000004F,
    ASTC8x6Unorm = 0x00000050,
    ASTC8x6UnormSrgb = 0x00000051,
    ASTC8x8Unorm = 0x00000052,
    ASTC8x8UnormSrgb = 0x00000053,
    ASTC10x5Unorm = 0x00000054,
    ASTC10x5UnormSrgb = 0x00000055,
    ASTC10x6Unorm = 0x00000056,
    ASTC10x6UnormSrgb = 0x00000057,
    ASTC10x8Unorm = 0x00000058,
    ASTC10x8UnormSrgb = 0x00000059,
    ASTC10x10Unorm = 0x0000005A,
    ASTC10x10UnormSrgb = 0x0000005B,
    ASTC12x10Unorm = 0x0000005C,
    ASTC12x10UnormSrgb = 0x0000005D,
    ASTC12x12Unorm = 0x0000005E,
    ASTC12x12UnormSrgb = 0x0000005F,
    Force32 = 0x7FFFFFFF
}

enum WGPUTextureSampleType
{
    BindingNotUsed = 0x00000000,
    Undefined = 0x00000001,
    Float = 0x00000002,
    UnfilterableFloat = 0x00000003,
    Depth = 0x00000004,
    Sint = 0x00000005,
    Uint = 0x00000006,
    Force32 = 0x7FFFFFFF
}

enum WGPUTextureViewDimension
{
    Undefined = 0x00000000,
    D1 = 0x00000001,
    D2 = 0x00000002,
    D2Array = 0x00000003,
    Cube = 0x00000004,
    CubeArray = 0x00000005,
    D3 = 0x00000006,
    Force32 = 0x7FFFFFFF
}

enum WGPUVertexFormat
{
    Uint8 = 0x00000001,
    Uint8x2 = 0x00000002,
    Uint8x4 = 0x00000003,
    Sint8 = 0x00000004,
    Sint8x2 = 0x00000005,
    Sint8x4 = 0x00000006,
    Unorm8 = 0x00000007,
    Unorm8x2 = 0x00000008,
    Unorm8x4 = 0x00000009,
    Snorm8 = 0x0000000A,
    Snorm8x2 = 0x0000000B,
    Snorm8x4 = 0x0000000C,
    Uint16 = 0x0000000D,
    Uint16x2 = 0x0000000E,
    Uint16x4 = 0x0000000F,
    Sint16 = 0x00000010,
    Sint16x2 = 0x00000011,
    Sint16x4 = 0x00000012,
    Unorm16 = 0x00000013,
    Unorm16x2 = 0x00000014,
    Unorm16x4 = 0x00000015,
    Snorm16 = 0x00000016,
    Snorm16x2 = 0x00000017,
    Snorm16x4 = 0x00000018,
    Float16 = 0x00000019,
    Float16x2 = 0x0000001A,
    Float16x4 = 0x0000001B,
    Float32 = 0x0000001C,
    Float32x2 = 0x0000001D,
    Float32x3 = 0x0000001E,
    Float32x4 = 0x0000001F,
    Uint32 = 0x00000020,
    Uint32x2 = 0x00000021,
    Uint32x3 = 0x00000022,
    Uint32x4 = 0x00000023,
    Sint32 = 0x00000024,
    Sint32x2 = 0x00000025,
    Sint32x3 = 0x00000026,
    Sint32x4 = 0x00000027,
    Unorm10_10_10_2 = 0x00000028,
    Unorm8x4BGRA = 0x00000029,
    Force32 = 0x7FFFFFFF
}

enum WGPUVertexStepMode
{
    VertexBufferNotUsed = 0x00000000,
    Undefined = 0x00000001,
    Vertex = 0x00000002,
    Instance = 0x00000003,
    Force32 = 0x7FFFFFFF
}

enum WGPUWGSLLanguageFeatureName
{
    ReadonlyAndReadwriteStorageTextures = 0x00000001,
    Packed4x8IntegerDotProduct = 0x00000002,
    UnrestrictedPointerParameters = 0x00000003,
    PointerCompositeAccess = 0x00000004,
    Force32 = 0x7FFFFFFF
}

enum WGPUWaitStatus
{
    Success = 0x00000001,
    TimedOut = 0x00000002,
    UnsupportedTimeout = 0x00000003,
    UnsupportedCount = 0x00000004,
    UnsupportedMixedSources = 0x00000005,
    Force32 = 0x7FFFFFFF
}

enum WGPUBufferUsage: WGPUFlags
{
    None = 0x0000000000000000,
    MapRead = 0x0000000000000001,
    MapWrite = 0x0000000000000002,
    CopySrc = 0x0000000000000004,
    CopyDst = 0x0000000000000008,
    Index = 0x0000000000000010,
    Vertex = 0x0000000000000020,
    Uniform = 0x0000000000000040,
    Storage = 0x0000000000000080,
    Indirect = 0x0000000000000100,
    QueryResolve = 0x0000000000000200
}

enum WGPUColorWriteMask: WGPUFlags
{
    None = 0x0000000000000000,
    Red = 0x0000000000000001,
    Green = 0x0000000000000002,
    Blue = 0x0000000000000004,
    Alpha = 0x0000000000000008,
    All = 0x000000000000000F // Red | Green | Blue | Alpha
}

enum WGPUMapMode: WGPUFlags
{
    None = 0x0000000000000000,
    Read = 0x0000000000000001,
    Write = 0x0000000000000002
}

enum WGPUShaderStage: WGPUFlags
{
    None = 0x0000000000000000,
    Vertex = 0x0000000000000001,
    Fragment = 0x0000000000000002,
    Compute = 0x0000000000000004
}

enum WGPUTextureUsage: WGPUFlags
{
    None = 0x0000000000000000,
    CopySrc = 0x0000000000000001,
    CopyDst = 0x0000000000000002,
    TextureBinding = 0x0000000000000004,
    StorageBinding = 0x0000000000000008,
    RenderAttachment = 0x0000000000000010
}

extern(C)
{
    alias WGPUProc = void function();
    
    alias WGPUBufferMapCallback = void function(WGPUMapAsyncStatus status, WGPUStringView message, void* userdata1, void* userdata2);
    alias WGPUCompilationInfoCallback = void function(WGPUCompilationInfoRequestStatus status, const(WGPUCompilationInfo)* compilationInfo, void* userdata1, void* userdata2);
    alias WGPUCreateComputePipelineAsyncCallback = void function(WGPUCreatePipelineAsyncStatus status, WGPUComputePipeline pipeline, WGPUStringView message, void* userdata1, void* userdata2);
    alias WGPUCreateRenderPipelineAsyncCallback = void function(WGPUCreatePipelineAsyncStatus status, WGPURenderPipeline pipeline, WGPUStringView message, void* userdata1, void* userdata2);
    alias WGPUDeviceLostCallback = void function(const(WGPUDevice)* device, WGPUDeviceLostReason reason, WGPUStringView message, void* userdata1, void* userdata2);
    alias WGPUPopErrorScopeCallback = void function(WGPUPopErrorScopeStatus status, WGPUErrorType type, WGPUStringView message, void* userdata1, void* userdata2);
    alias WGPUQueueWorkDoneCallback = void function(WGPUQueueWorkDoneStatus status, void* userdata1, void* userdata2);
    alias WGPURequestAdapterCallback = void function(WGPURequestAdapterStatus status, WGPUAdapter adapter, WGPUStringView message, void* userdata1, void* userdata2);
    alias WGPURequestDeviceCallback = void function(WGPURequestDeviceStatus status, WGPUDevice device, WGPUStringView message, void* userdata1, void* userdata2);
    alias WGPUUncapturedErrorCallback = void function(const(WGPUDevice)* device, WGPUErrorType type, WGPUStringView message, void* userdata1, void* userdata2);
}

struct WGPUChainedStruct
{
    const(WGPUChainedStruct)* next;
    WGPUSType sType;
}

struct WGPUChainedStructOut
{
    WGPUChainedStructOut* next;
    WGPUSType sType;
}

struct WGPUBufferMapCallbackInfo
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUCallbackMode mode;
    WGPUBufferMapCallback callback;
    void* userdata1; // nullable
    void* userdata2; // nullable
}

struct WGPUCompilationInfoCallbackInfo
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUCallbackMode mode;
    WGPUCompilationInfoCallback callback;
    void* userdata1; // nullable
    void* userdata2; // nullable
}

struct WGPUCreateComputePipelineAsyncCallbackInfo
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUCallbackMode mode;
    WGPUCreateComputePipelineAsyncCallback callback;
    void* userdata1; // nullable
    void* userdata2; // nullable
}

struct WGPUCreateRenderPipelineAsyncCallbackInfo
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUCallbackMode mode;
    WGPUCreateRenderPipelineAsyncCallback callback;
    void* userdata1; // nullable
    void* userdata2; // nullable
}

struct WGPUDeviceLostCallbackInfo
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUCallbackMode mode;
    WGPUDeviceLostCallback callback;
    void* userdata1; // nullable
    void* userdata2; // nullable
}

struct WGPUPopErrorScopeCallbackInfo
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUCallbackMode mode;
    WGPUPopErrorScopeCallback callback;
    void* userdata1; // nullable
    void* userdata2; // nullable
}

struct WGPUQueueWorkDoneCallbackInfo
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUCallbackMode mode;
    WGPUQueueWorkDoneCallback callback;
    void* userdata1; // nullable
    void* userdata2; // nullable
}

struct WGPURequestAdapterCallbackInfo
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUCallbackMode mode;
    WGPURequestAdapterCallback callback;
    void* userdata1; // nullable
    void* userdata2; // nullable
}

struct WGPURequestDeviceCallbackInfo
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUCallbackMode mode;
    WGPURequestDeviceCallback callback;
    void* userdata1; // nullable
    void* userdata2; // nullable
}

struct WGPUUncapturedErrorCallbackInfo
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUUncapturedErrorCallback callback;
    void* userdata1; // nullable
    void* userdata2; // nullable
}

struct WGPUAdapterInfo
{
    WGPUChainedStructOut* nextInChain;
    WGPUStringView vendor;
    WGPUStringView architecture;
    WGPUStringView device;
    WGPUStringView description;
    WGPUBackendType backendType;
    WGPUAdapterType adapterType;
    uint vendorID;
    uint deviceID;
}

struct WGPUBindGroupEntry
{
    const(WGPUChainedStruct)* nextInChain;
    uint binding;
    WGPUBuffer buffer; // nullable
    ulong offset;
    ulong size;
    WGPUSampler sampler; // nullable
    WGPUTextureView textureView; // nullable
}

struct WGPUBlendComponent
{
    WGPUBlendOperation operation;
    WGPUBlendFactor srcFactor;
    WGPUBlendFactor dstFactor;
}

struct WGPUBufferBindingLayout
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUBufferBindingType type;
    WGPUBool hasDynamicOffset;
    ulong minBindingSize;
}

struct WGPUBufferDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    WGPUBufferUsage usage;
    ulong size;
    WGPUBool mappedAtCreation;
}

struct WGPUColor
{
    double r;
    double g;
    double b;
    double a;
}

struct WGPUCommandBufferDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
}

struct WGPUCommandEncoderDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
}

struct WGPUCompilationMessage
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView message;
    WGPUCompilationMessageType type;
    ulong lineNum;
    ulong linePos;
    ulong offset;
    ulong length;
}

struct WGPUComputePassTimestampWrites
{
    WGPUQuerySet querySet;
    uint beginningOfPassWriteIndex;
    uint endOfPassWriteIndex;
}

struct WGPUConstantEntry
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView key; // non-null
    double value;
}

struct WGPUExtent3D
{
    uint width;
    uint height;
    uint depthOrArrayLayers;
}

struct WGPUFuture
{
    ulong id;
}

struct WGPUInstanceCapabilities
{
    WGPUChainedStructOut* nextInChain;
    WGPUBool timedWaitAnyEnable;
    size_t timedWaitAnyMaxCount;
}

/**
 * Default values as per https://www.w3.org/TR/webgpu/#limits
 */
struct WGPULimits
{
    WGPUChainedStructOut* nextInChain;
    uint maxTextureDimension1D = 8192;
    uint maxTextureDimension2D = 8192;
    uint maxTextureDimension3D = 2048;
    uint maxTextureArrayLayers = 256;
    uint maxBindGroups = 4;
    uint maxBindGroupsPlusVertexBuffers = 24;
    uint maxBindingsPerBindGroup = 640;
    uint maxDynamicUniformBuffersPerPipelineLayout = 8;
    uint maxDynamicStorageBuffersPerPipelineLayout = 4;
    uint maxSampledTexturesPerShaderStage = 16;
    uint maxSamplersPerShaderStage = 16;
    uint maxStorageBuffersPerShaderStage = 8;
    uint maxStorageTexturesPerShaderStage = 4;
    uint maxUniformBuffersPerShaderStage = 12;
    ulong maxUniformBufferBindingSize = 65536;
    ulong maxStorageBufferBindingSize = 134217728;
    uint minUniformBufferOffsetAlignment = 256;
    uint minStorageBufferOffsetAlignment = 256;
    uint maxVertexBuffers = 8;
    ulong maxBufferSize = 268435456;
    uint maxVertexAttributes = 16;
    uint maxVertexBufferArrayStride = 2048;
    uint maxInterStageShaderVariables = 16;
    uint maxColorAttachments = 8;
    uint maxColorAttachmentBytesPerSample = 32;
    uint maxComputeWorkgroupStorageSize = 16384;
    uint maxComputeInvocationsPerWorkgroup = 256;
    uint maxComputeWorkgroupSizeX = 256;
    uint maxComputeWorkgroupSizeY = 256;
    uint maxComputeWorkgroupSizeZ = 64;
    uint maxComputeWorkgroupsPerDimension = 65535;
}

struct WGPUMultisampleState
{
    const(WGPUChainedStruct)* nextInChain;
    uint count;
    uint mask;
    WGPUBool alphaToCoverageEnabled;
}

struct WGPUOrigin3D
{
    uint x;
    uint y;
    uint z;
}

struct WGPUPipelineLayoutDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    size_t bindGroupLayoutCount;
    const(WGPUBindGroupLayout)* bindGroupLayouts;
}

struct WGPUPrimitiveState
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUPrimitiveTopology topology;
    WGPUIndexFormat stripIndexFormat;
    WGPUFrontFace frontFace;
    WGPUCullMode cullMode;
    WGPUBool unclippedDepth;
}

struct WGPUQuerySetDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    WGPUQueryType type;
    uint count;
}

struct WGPUQueueDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
}

struct WGPURenderBundleDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
}

struct WGPURenderBundleEncoderDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    size_t colorFormatCount;
    const(WGPUTextureFormat)* colorFormats;
    WGPUTextureFormat depthStencilFormat;
    uint sampleCount;
    WGPUBool depthReadOnly;
    WGPUBool stencilReadOnly;
}

struct WGPURenderPassDepthStencilAttachment
{
    WGPUTextureView view;
    WGPULoadOp depthLoadOp;
    WGPUStoreOp depthStoreOp;
    float depthClearValue;
    WGPUBool depthReadOnly;
    WGPULoadOp stencilLoadOp;
    WGPUStoreOp stencilStoreOp;
    uint stencilClearValue;
    WGPUBool stencilReadOnly;
}

struct WGPURenderPassMaxDrawCount
{
    WGPUChainedStruct chain;
    ulong maxDrawCount;
}

struct WGPURenderPassTimestampWrites
{
    WGPUQuerySet querySet;
    uint beginningOfPassWriteIndex;
    uint endOfPassWriteIndex;
}

struct WGPURequestAdapterOptions
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUFeatureLevel featureLevel;
    WGPUPowerPreference powerPreference;
    WGPUBool forceFallbackAdapter;
    WGPUBackendType backendType;
    WGPUSurface compatibleSurface; // nullable
}

struct WGPUSamplerBindingLayout
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUSamplerBindingType type;
}

/**
 * Default values as per https://www.w3.org/TR/webgpu/#GPUSamplerDescriptor
 */
struct WGPUSamplerDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    WGPUAddressMode addressModeU = WGPUAddressMode.ClampToEdge;
    WGPUAddressMode addressModeV = WGPUAddressMode.ClampToEdge;
    WGPUAddressMode addressModeW = WGPUAddressMode.ClampToEdge;
    WGPUFilterMode magFilter = WGPUFilterMode.Nearest;
    WGPUFilterMode minFilter = WGPUFilterMode.Nearest;
    WGPUMipmapFilterMode mipmapFilter = WGPUMipmapFilterMode.Nearest;
    float lodMinClamp = 0.0f;
    float lodMaxClamp = 32.0f;
    WGPUCompareFunction compare;
    ushort maxAnisotropy = 1;
}

struct WGPUShaderModuleDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label;
}

struct WGPUShaderSourceSPIRV
{
    WGPUChainedStruct chain;
    uint codeSize;
    const(uint)* code;
}

struct WGPUShaderSourceWGSL
{
    WGPUChainedStruct chain;
    WGPUStringView code;
}

struct WGPUStencilFaceState
{
    WGPUCompareFunction compare;
    WGPUStencilOperation failOp;
    WGPUStencilOperation depthFailOp;
    WGPUStencilOperation passOp;
}

struct WGPUStorageTextureBindingLayout
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStorageTextureAccess access;
    WGPUTextureFormat format;
    WGPUTextureViewDimension viewDimension;
}

struct WGPUSupportedFeatures
{
    size_t featureCount;
    const(WGPUFeatureName)* features;
}

struct WGPUSupportedWGSLLanguageFeatures
{
    size_t featureCount;
    const(WGPUWGSLLanguageFeatureName)* features;
}

struct WGPUSurfaceCapabilities
{
    WGPUChainedStructOut* nextInChain;
    WGPUTextureUsage usages;
    size_t formatCount;
    const(WGPUTextureFormat)* formats;
    size_t presentModeCount;
    const(WGPUPresentMode)* presentModes;
    size_t alphaModeCount;
    const(WGPUCompositeAlphaMode)* alphaModes;
}

struct WGPUSurfaceConfiguration
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUDevice device;
    WGPUTextureFormat format;
    WGPUTextureUsage usage;
    uint32_t width;
    uint32_t height;
    size_t viewFormatCount;
    const(WGPUTextureFormat)* viewFormats;
    WGPUCompositeAlphaMode alphaMode;
    WGPUPresentMode presentMode;
}

struct WGPUSurfaceDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
}

struct WGPUSurfaceSourceAndroidNativeWindow
{
    WGPUChainedStruct chain;
    void* window;
}

struct WGPUSurfaceSourceMetalLayer
{
    WGPUChainedStruct chain;
    void* layer;
}

struct WGPUSurfaceSourceWaylandSurface
{
    WGPUChainedStruct chain;
    void* display;
    void* surface;
}

struct WGPUSurfaceSourceWindowsHWND
{
    WGPUChainedStruct chain;
    void* hinstance;
    void* hwnd;
}

struct WGPUSurfaceSourceXCBWindow
{
    WGPUChainedStruct chain;
    void* connection;
    uint window;
}

struct WGPUSurfaceSourceXlibWindow
{
    WGPUChainedStruct chain;
    void* display;
    ulong window;
}

struct WGPUSurfaceTexture
{
    WGPUChainedStructOut* nextInChain;
    WGPUTexture texture;
    WGPUSurfaceGetCurrentTextureStatus status;
}

struct WGPUTexelCopyBufferLayout
{
    ulong offset;
    uint bytesPerRow;
    uint rowsPerImage;
}

struct WGPUTextureBindingLayout
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUTextureSampleType sampleType;
    WGPUTextureViewDimension viewDimension;
    WGPUBool multisampled;
}

struct WGPUTextureViewDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    WGPUTextureFormat format;
    WGPUTextureViewDimension dimension;
    uint baseMipLevel;
    uint mipLevelCount;
    uint baseArrayLayer;
    uint arrayLayerCount;
    WGPUTextureAspect aspect;
    WGPUTextureUsage usage;
}

struct WGPUVertexAttribute
{
    WGPUVertexFormat format;
    ulong offset;
    uint shaderLocation;
}

struct WGPUBindGroupDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    WGPUBindGroupLayout layout;
    size_t entryCount;
    const(WGPUBindGroupEntry)* entries;
}

struct WGPUBindGroupLayoutEntry
{
    const(WGPUChainedStruct)* nextInChain;
    uint binding;
    WGPUShaderStage visibility;
    WGPUBufferBindingLayout buffer;
    WGPUSamplerBindingLayout sampler;
    WGPUTextureBindingLayout texture;
    WGPUStorageTextureBindingLayout storageTexture;
}

struct WGPUBlendState
{
    WGPUBlendComponent color;
    WGPUBlendComponent alpha;
}

struct WGPUCompilationInfo
{
    const(WGPUChainedStruct)* nextInChain;
    size_t messageCount;
    const(WGPUCompilationMessage)* messages;
}

struct WGPUComputePassDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    const(WGPUComputePassTimestampWrites)* timestampWrites;
}

struct WGPUDepthStencilState
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUTextureFormat format;
    WGPUOptionalBool depthWriteEnabled;
    WGPUCompareFunction depthCompare;
    WGPUStencilFaceState stencilFront;
    WGPUStencilFaceState stencilBack;
    uint stencilReadMask;
    uint stencilWriteMask;
    int depthBias;
    float depthBiasSlopeScale;
    float depthBiasClamp;
}

struct WGPUDeviceDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    size_t requiredFeatureCount;
    const(WGPUFeatureName)* requiredFeatures;
    const(WGPULimits)* requiredLimits; // nullable
    WGPUQueueDescriptor defaultQueue;
    WGPUDeviceLostCallback deviceLostCallback;
    WGPUUncapturedErrorCallbackInfo uncapturedErrorCallbackInfo;
}

struct WGPUFutureWaitInfo
{
    WGPUFuture future;
    WGPUBool completed;
}

struct WGPUInstanceDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUInstanceCapabilities features;
}

struct WGPUProgrammableStageDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUShaderModule module_;
    WGPUStringView entryPoint; // non-null
    size_t constantCount;
    const(WGPUConstantEntry)* constants;
}

struct WGPURenderPassColorAttachment
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUTextureView view; // nullable
    uint depthSlice;
    WGPUTextureView resolveTarget; // nullable
    WGPULoadOp loadOp;
    WGPUStoreOp storeOp;
    WGPUColor clearValue;
}

struct WGPUTexelCopyBufferInfo
{
    WGPUTexelCopyBufferLayout layout;
    WGPUBuffer buffer;
}

struct WGPUTexelCopyTextureInfo
{
    WGPUTexture texture;
    uint mipLevel;
    WGPUOrigin3D origin;
    WGPUTextureAspect aspect;
}

struct WGPUTextureDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    WGPUTextureUsage usage;
    WGPUTextureDimension dimension;
    WGPUExtent3D size;
    WGPUTextureFormat format;
    uint mipLevelCount;
    uint sampleCount;
    size_t viewFormatCount;
    const(WGPUTextureFormat)* viewFormats;
}

struct WGPUVertexBufferLayout
{
    WGPUVertexStepMode stepMode;
    ulong arrayStride;
    size_t attributeCount;
    const(WGPUVertexAttribute)* attributes;
}

struct WGPUBindGroupLayoutDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    size_t entryCount;
    const(WGPUBindGroupLayoutEntry)* entries;
}

struct WGPUColorTargetState
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUTextureFormat format;
    const(WGPUBlendState)* blend; // nullable
    WGPUColorWriteMask writeMask;
}

struct WGPUComputePipelineDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    WGPUPipelineLayout layout; // nullable
    WGPUProgrammableStageDescriptor compute;
}

struct WGPURenderPassDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    size_t colorAttachmentCount;
    const(WGPURenderPassColorAttachment)* colorAttachments;
    const(WGPURenderPassDepthStencilAttachment)* depthStencilAttachment; // nullable
    WGPUQuerySet occlusionQuerySet; // nullable
    const(WGPURenderPassTimestampWrites)* timestampWrites; // nullable
}

struct WGPUVertexState
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUShaderModule module_;
    WGPUStringView entryPoint; // non-null
    size_t constantCount;
    const(WGPUConstantEntry)* constants;
    size_t bufferCount;
    const(WGPUVertexBufferLayout)* buffers;
}

struct WGPUFragmentState
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUShaderModule module_;
    WGPUStringView entryPoint; // non-null
    size_t constantCount;
    const(WGPUConstantEntry)* constants;
    size_t targetCount;
    const(WGPUColorTargetState)* targets;
}

struct WGPURenderPipelineDescriptor
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUStringView label; // non-null
    WGPUPipelineLayout layout; // nullable
    WGPUVertexState vertex;
    WGPUPrimitiveState primitive;
    const(WGPUDepthStencilState)* depthStencil; // nullable
    WGPUMultisampleState multisample;
    const(WGPUFragmentState)* fragment; // nullable
}

extern(C) @nogc nothrow:

alias WGPUProcCreateInstance = WGPUInstance function(const(WGPUInstanceDescriptor)* descriptor);
alias WGPUProcGetInstanceCapabilities = WGPUStatus function(WGPUInstanceCapabilities* capabilities);
alias WGPUProcGetProcAddress = WGPUProc function(WGPUStringView procName);

// Procs of Adapter
alias WGPUProcAdapterGetFeatures = void function(WGPUAdapter adapter, WGPUSupportedFeatures* features);
alias WGPUProcAdapterGetInfo = WGPUStatus function(WGPUAdapter adapter, WGPUAdapterInfo* info);
alias WGPUProcAdapterGetLimits = WGPUStatus function(WGPUAdapter adapter, WGPULimits* limits);
alias WGPUProcAdapterHasFeature = WGPUBool function(WGPUAdapter adapter, WGPUFeatureName feature);
alias WGPUProcAdapterRequestDevice = WGPUFuture function(WGPUAdapter adapter, const(WGPUDeviceDescriptor)* descriptor, WGPURequestDeviceCallbackInfo callbackInfo);
alias WGPUProcAdapterAddRef = void function(WGPUAdapter adapter);
alias WGPUProcAdapterRelease = void function(WGPUAdapter adapter);

// Procs of AdapterInfo
alias WGPUProcAdapterInfoFreeMembers = void function(WGPUAdapterInfo adapterInfo);

// Procs of BindGroup
alias WGPUProcBindGroupSetLabel = void function(WGPUBindGroup bindGroup, WGPUStringView label);
alias WGPUProcBindGroupAddRef = void function(WGPUBindGroup bindGroup);
alias WGPUProcBindGroupRelease = void function(WGPUBindGroup bindGroup);

// Procs of BindGroupLayout
alias WGPUProcBindGroupLayoutSetLabel = void function(WGPUBindGroupLayout bindGroupLayout, WGPUStringView label);
alias WGPUProcBindGroupLayoutAddRef = void function(WGPUBindGroupLayout bindGroupLayout);
alias WGPUProcBindGroupLayoutRelease = void function(WGPUBindGroupLayout bindGroupLayout);

// Procs of Buffer
alias WGPUProcBufferDestroy = void function(WGPUBuffer buffer);
alias WGPUProcBufferGetConstMappedRange = const(void)* function(WGPUBuffer buffer, size_t offset, size_t size);
alias WGPUProcBufferGetMapState = WGPUBufferMapState function(WGPUBuffer buffer);
alias WGPUProcBufferGetMappedRange = void* function(WGPUBuffer buffer, size_t offset, size_t size);
alias WGPUProcBufferGetSize = size_t function(WGPUBuffer buffer);
alias WGPUProcBufferGetUsage = WGPUBufferUsage function(WGPUBuffer buffer);
alias WGPUProcBufferMapAsync = WGPUFuture function(WGPUBuffer buffer, WGPUMapMode mode, size_t offset, size_t size, WGPUBufferMapCallbackInfo callbackInfo);
alias WGPUProcBufferSetLabel = void function (WGPUBuffer buffer, WGPUStringView label);
alias WGPUProcBufferUnmap = void function(WGPUBuffer buffer);
alias WGPUProcBufferAddRef = void function(WGPUBuffer buffer);
alias WGPUProcBufferRelease = void function(WGPUBuffer buffer);

// Procs of CommandBuffer
alias WGPUProcCommandBufferSetLabel = void function(WGPUCommandBuffer commandBuffer, WGPUStringView label);
alias WGPUProcCommandBufferAddRef = void function(WGPUCommandBuffer commandBuffer);
alias WGPUProcCommandBufferRelease = void function(WGPUCommandBuffer commandBuffer);

// Procs of CommandEncoder
alias WGPUProcCommandEncoderBeginComputePass = WGPUComputePassEncoder* function(WGPUCommandEncoder commandEncoder, const(WGPUComputePassDescriptor)* descriptor);
alias WGPUProcCommandEncoderBeginRenderPass = WGPURenderPassEncoder* function(WGPUCommandEncoder commandEncoder, const(WGPURenderPassDescriptor)* descriptor);
alias WGPUProcCommandEncoderClearBuffer = void function(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, ulong offset, ulong size);
alias WGPUProcCommandEncoderCopyBufferToBuffer = void function(WGPUCommandEncoder commandEncoder, WGPUBuffer source, ulong sourceOffset, WGPUBuffer destination, ulong destinationOffset, ulong size);
alias WGPUProcCommandEncoderCopyBufferToTexture = void function(WGPUCommandEncoder commandEncoder, const(WGPUTexelCopyBufferInfo)* source, const(WGPUTexelCopyTextureInfo)* destination, const(WGPUExtent3D)* copySize);
alias WGPUProcCommandEncoderCopyTextureToBuffer = void function(WGPUCommandEncoder commandEncoder, const(WGPUTexelCopyTextureInfo)* source, const(WGPUTexelCopyBufferInfo)* destination, const(WGPUExtent3D)* copySize);
alias WGPUProcCommandEncoderCopyTextureToTexture = void function(WGPUCommandEncoder commandEncoder, const(WGPUTexelCopyTextureInfo)* source, const(WGPUTexelCopyTextureInfo)* destination, const(WGPUExtent3D)* copySize);
alias WGPUProcCommandEncoderFinish = WGPUCommandBuffer function(WGPUCommandEncoder commandEncoder, const(WGPUCommandBufferDescriptor)* descriptor);
alias WGPUProcCommandEncoderInsertDebugMarker = void function(WGPUCommandEncoder commandEncoder, WGPUStringView markerLabel);
alias WGPUProcCommandEncoderPopDebugGroup = void function(WGPUCommandEncoder commandEncoder);
alias WGPUProcCommandEncoderPushDebugGroup = void function(WGPUCommandEncoder commandEncoder, WGPUStringView groupLabel);
alias WGPUProcCommandEncoderResolveQuerySet = void function(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint firstQuery, uint queryCount, WGPUBuffer destination, ulong destinationOffset);
alias WGPUProcCommandEncoderSetLabel = void function(WGPUCommandEncoder commandEncoder, WGPUStringView label);
alias WGPUProcCommandEncoderWriteTimestamp = void function(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint queryIndex);
alias WGPUProcCommandEncoderAddRef = void function(WGPUCommandEncoder commandEncoder);
alias WGPUProcCommandEncoderRelease = void function(WGPUCommandEncoder commandEncoder);

// Procs of ComputePassEncoder
alias WGPUProcComputePassEncoderDispatchWorkgroups = void function(WGPUComputePassEncoder computePassEncoder, uint workgroupCountX, uint workgroupCountY, uint workgroupCountZ);
alias WGPUProcComputePassEncoderDispatchWorkgroupsIndirect = void function(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcComputePassEncoderEnd = void function(WGPUComputePassEncoder computePassEncoder);
alias WGPUProcComputePassEncoderInsertDebugMarker = void function(WGPUComputePassEncoder computePassEncoder, WGPUStringView markerLabel);
alias WGPUProcComputePassEncoderPopDebugGroup = void function(WGPUComputePassEncoder computePassEncoder);
alias WGPUProcComputePassEncoderPushDebugGroup = void function(WGPUComputePassEncoder computePassEncoder, WGPUStringView groupLabel);
alias WGPUProcComputePassEncoderSetBindGroup = void function(WGPUComputePassEncoder computePassEncoder, uint groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const(uint)* dynamicOffsets);
alias WGPUProcComputePassEncoderSetLabel = void function(WGPUComputePassEncoder computePassEncoder, WGPUStringView label);
alias WGPUProcComputePassEncoderSetPipeline = void function(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline);
alias WGPUProcComputePassEncoderAddRef = void function(WGPUComputePassEncoder computePassEncoder);
alias WGPUProcComputePassEncoderRelease = void function(WGPUComputePassEncoder computePassEncoder);

// Procs of ComputePipeline
alias WGPUProcComputePipelineGetBindGroupLayout = WGPUBindGroupLayout* function(WGPUComputePipeline computePipeline, uint groupIndex);
alias WGPUProcComputePipelineSetLabel = void function(WGPUComputePipeline computePipeline, WGPUStringView label);
alias WGPUProcComputePipelineAddRef = void function(WGPUComputePipeline computePipeline);
alias WGPUProcComputePipelineRelease = void function(WGPUComputePipeline computePipeline);

// Procs of Device
alias WGPUProcDeviceCreateBindGroup = WGPUBindGroup function(WGPUDevice device, const(WGPUBindGroupDescriptor)* descriptor);
alias WGPUProcDeviceCreateBindGroupLayout = WGPUBindGroupLayout function(WGPUDevice device, const(WGPUBindGroupLayoutDescriptor)* descriptor);
alias WGPUProcDeviceCreateBuffer = WGPUBuffer function(WGPUDevice device, const(WGPUBufferDescriptor)* descriptor);
alias WGPUProcDeviceCreateCommandEncoder = WGPUCommandEncoder function(WGPUDevice device, const(WGPUCommandEncoderDescriptor)* descriptor);
alias WGPUProcDeviceCreateComputePipeline = WGPUComputePipeline function(WGPUDevice device, const(WGPUComputePipelineDescriptor)* descriptor);
alias WGPUProcDeviceCreateComputePipelineAsync = WGPUFuture function(WGPUDevice device, const(WGPUComputePipelineDescriptor)* descriptor, WGPUCreateComputePipelineAsyncCallbackInfo callbackInfo);
alias WGPUProcDeviceCreatePipelineLayout = WGPUPipelineLayout function(WGPUDevice device, const(WGPUPipelineLayoutDescriptor)* descriptor);
alias WGPUProcDeviceCreateQuerySet = WGPUQuerySet function(WGPUDevice device, const(WGPUQuerySetDescriptor)* descriptor);
alias WGPUProcDeviceCreateRenderBundleEncoder = WGPURenderBundleEncoder function(WGPUDevice device, const(WGPURenderBundleEncoderDescriptor)* descriptor);
alias WGPUProcDeviceCreateRenderPipeline = WGPURenderPipeline function(WGPUDevice device, const(WGPURenderPipelineDescriptor)* descriptor);
alias WGPUProcDeviceCreateRenderPipelineAsync = WGPUFuture function(WGPUDevice device, const(WGPURenderPipelineDescriptor)* descriptor, WGPUCreateRenderPipelineAsyncCallbackInfo callbackInfo);
alias WGPUProcDeviceCreateSampler = WGPUSampler function(WGPUDevice device, const(WGPUSamplerDescriptor)* descriptor);
alias WGPUProcDeviceCreateShaderModule = WGPUShaderModule function(WGPUDevice device, const(WGPUShaderModuleDescriptor)* descriptor);
alias WGPUProcDeviceCreateTexture = WGPUTexture function(WGPUDevice device, const(WGPUTextureDescriptor)* descriptor);
alias WGPUProcDeviceDestroy = void function(WGPUDevice device);
alias WGPUProcDeviceGetAdapterInfo = WGPUAdapterInfo function(WGPUDevice device);
alias WGPUProcDeviceGetFeatures = void function(WGPUDevice device, WGPUSupportedFeatures* features);
alias WGPUProcDeviceGetLimits = WGPUStatus function(WGPUDevice device, WGPULimits* limits);
alias WGPUProcDeviceGetLostFuture = WGPUFuture function(WGPUDevice device);
alias WGPUProcDeviceGetQueue = WGPUQueue function(WGPUDevice device);
alias WGPUProcDeviceHasFeature = WGPUBool function(WGPUDevice device, WGPUFeatureName feature);
alias WGPUProcDevicePopErrorScope = WGPUFuture function(WGPUDevice device, WGPUPopErrorScopeCallbackInfo callbackInfo);
alias WGPUProcDevicePushErrorScope = void function(WGPUDevice device, WGPUErrorFilter filter);
alias WGPUProcDeviceSetLabel = void function(WGPUDevice device, WGPUStringView label);
alias WGPUProcDeviceAddRef = void function(WGPUDevice device);
alias WGPUProcDeviceRelease = void function(WGPUDevice device);

// Procs of Instance
alias WGPUProcInstanceCreateSurface = WGPUSurface function(WGPUInstance instance, const(WGPUSurfaceDescriptor)* descriptor);
alias WGPUProcInstanceGetWGSLLanguageFeatures = WGPUStatus function(WGPUInstance instance, WGPUSupportedWGSLLanguageFeatures* features);
alias WGPUProcInstanceHasWGSLLanguageFeature = WGPUBool function(WGPUInstance instance, WGPUWGSLLanguageFeatureName feature);
alias WGPUProcInstanceProcessEvents = void function(WGPUInstance instance);
alias WGPUProcInstanceRequestAdapter = WGPUFuture function(WGPUInstance instance, const(WGPURequestAdapterOptions)* options, WGPURequestAdapterCallbackInfo callbackInfo);
alias WGPUProcInstanceWaitAny = WGPUWaitStatus function(WGPUInstance instance, size_t futureCount, WGPUFutureWaitInfo* futures, ulong timeoutNS);
alias WGPUProcInstanceAddRef = void function(WGPUInstance instance);
alias WGPUProcInstanceRelease = void function(WGPUInstance instance);

// Procs of PipelineLayout
alias WGPUProcPipelineLayoutSetLabel = void function(WGPUPipelineLayout pipelineLayout, WGPUStringView label);
alias WGPUProcPipelineLayoutAddRef = void function(WGPUPipelineLayout pipelineLayout);
alias WGPUProcPipelineLayoutRelease = void function(WGPUPipelineLayout pipelineLayout);

// Procs of QuerySet
alias WGPUProcQuerySetDestroy = void function(WGPUQuerySet querySet);
alias WGPUProcQuerySetGetCount = uint function(WGPUQuerySet querySet);
alias WGPUProcQuerySetGetType = WGPUQueryType function(WGPUQuerySet querySet);
alias WGPUProcQuerySetSetLabel = void function(WGPUQuerySet querySet, WGPUStringView label);
alias WGPUProcQuerySetAddRef = void function(WGPUQuerySet querySet);
alias WGPUProcQuerySetRelease = void function(WGPUQuerySet querySet);

// Procs of Queue
alias WGPUProcQueueOnSubmittedWorkDone = WGPUFuture function(WGPUQueue queue, WGPUQueueWorkDoneCallbackInfo callbackInfo);
alias WGPUProcQueueSetLabel = void function(WGPUQueue queue, WGPUStringView label);
alias WGPUProcQueueSubmit = void function(WGPUQueue queue, size_t commandCount, const(WGPUCommandBuffer)* commands);
alias WGPUProcQueueWriteBuffer = void function(WGPUQueue queue, WGPUBuffer buffer, ulong bufferOffset, const(void)* data, size_t size);
alias WGPUProcQueueWriteTexture = void function(WGPUQueue queue, const(WGPUTexelCopyTextureInfo)* destination, const(void)* data, size_t dataSize, const(WGPUTexelCopyBufferLayout)* dataLayout, const(WGPUExtent3D)* writeSize);
alias WGPUProcQueueAddRef = void function(WGPUQueue queue);
alias WGPUProcQueueRelease = void function(WGPUQueue queue);

// Procs of RenderBundle
alias WGPUProcRenderBundleSetLabel = void function(WGPURenderBundle renderBundle, WGPUStringView label);
alias WGPUProcRenderBundleAddRef = void function(WGPURenderBundle renderBundle);
alias WGPUProcRenderBundleRelease = void function(WGPURenderBundle renderBundle);

// Procs of RenderBundleEncoder
alias WGPUProcRenderBundleEncoderDraw = void function(WGPURenderBundleEncoder renderBundleEncoder, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
alias WGPUProcRenderBundleEncoderDrawIndexed = void function(WGPURenderBundleEncoder renderBundleEncoder, uint indexCount, uint instanceCount, uint firstIndex, int baseVertex, uint firstInstance);
alias WGPUProcRenderBundleEncoderDrawIndexedIndirect = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcRenderBundleEncoderDrawIndirect = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcRenderBundleEncoderFinish = WGPURenderBundle* function(WGPURenderBundleEncoder renderBundleEncoder, const(WGPURenderBundleDescriptor)* descriptor);
alias WGPUProcRenderBundleEncoderInsertDebugMarker = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel);
alias WGPUProcRenderBundleEncoderPopDebugGroup = void function(WGPURenderBundleEncoder renderBundleEncoder);
alias WGPUProcRenderBundleEncoderPushDebugGroup = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel);
alias WGPUProcRenderBundleEncoderSetBindGroup = void function(WGPURenderBundleEncoder renderBundleEncoder, uint groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const(uint)* dynamicOffsets);
alias WGPUProcRenderBundleEncoderSetIndexBuffer = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, ulong offset, ulong size);
alias WGPUProcRenderBundleEncoderSetLabel = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPUStringView label);
alias WGPUProcRenderBundleEncoderSetPipeline = void function(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline);
alias WGPUProcRenderBundleEncoderSetVertexBuffer = void function(WGPURenderBundleEncoder renderBundleEncoder, uint slot, WGPUBuffer buffer, ulong offset, ulong size);
alias WGPUProcRenderBundleEncoderAddRef = void function(WGPURenderBundleEncoder renderBundleEncoder);
alias WGPUProcRenderBundleEncoderRelease = void function(WGPURenderBundleEncoder renderBundleEncoder);

// Procs of RenderPassEncoder
alias WGPUProcRenderPassEncoderBeginOcclusionQuery = void function(WGPURenderPassEncoder renderPassEncoder, uint queryIndex);
alias WGPUProcRenderPassEncoderDraw = void function(WGPURenderPassEncoder renderPassEncoder, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
alias WGPUProcRenderPassEncoderDrawIndexed = void function(WGPURenderPassEncoder renderPassEncoder, uint indexCount, uint instanceCount, uint firstIndex, int baseVertex, uint firstInstance);
alias WGPUProcRenderPassEncoderDrawIndexedIndirect = void function(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcRenderPassEncoderDrawIndirect = void function(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);
alias WGPUProcRenderPassEncoderEnd = void function(WGPURenderPassEncoder renderPassEncoder);
alias WGPUProcRenderPassEncoderEndOcclusionQuery = void function(WGPURenderPassEncoder renderPassEncoder);
alias WGPUProcRenderPassEncoderExecuteBundles = void function(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, const(WGPURenderBundle)* bundles);
alias WGPUProcRenderPassEncoderInsertDebugMarker = void function(WGPURenderPassEncoder renderPassEncoder, WGPUStringView markerLabel);
alias WGPUProcRenderPassEncoderPopDebugGroup = void function(WGPURenderPassEncoder renderPassEncoder);
alias WGPUProcRenderPassEncoderPushDebugGroup = void function(WGPURenderPassEncoder renderPassEncoder, WGPUStringView groupLabel);
alias WGPUProcRenderPassEncoderSetBindGroup = void function(WGPURenderPassEncoder renderPassEncoder, uint groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, const(uint)* dynamicOffsets);
alias WGPUProcRenderPassEncoderSetBlendConstant = void function(WGPURenderPassEncoder renderPassEncoder, const(WGPUColor)* color);
alias WGPUProcRenderPassEncoderSetIndexBuffer = void function(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, ulong offset, ulong size);
alias WGPUProcRenderPassEncoderSetLabel = void function(WGPURenderPassEncoder renderPassEncoder, WGPUStringView label);
alias WGPUProcRenderPassEncoderSetPipeline = void function(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline);
alias WGPUProcRenderPassEncoderSetScissorRect = void function(WGPURenderPassEncoder renderPassEncoder, uint x, uint y, uint width, uint height);
alias WGPUProcRenderPassEncoderSetStencilReference = void function(WGPURenderPassEncoder renderPassEncoder, uint reference);
alias WGPUProcRenderPassEncoderSetVertexBuffer = void function(WGPURenderPassEncoder renderPassEncoder, uint slot, WGPUBuffer buffer, ulong offset, ulong size);
alias WGPUProcRenderPassEncoderSetViewport = void function(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);
alias WGPUProcRenderPassEncoderAddRef = void function(WGPURenderPassEncoder renderPassEncoder);
alias WGPUProcRenderPassEncoderRelease = void function(WGPURenderPassEncoder renderPassEncoder);

// Procs of RenderPipeline
alias WGPUProcRenderPipelineGetBindGroupLayout = WGPUBindGroupLayout* function(WGPURenderPipeline renderPipeline, uint groupIndex);
alias WGPUProcRenderPipelineSetLabel = void function(WGPURenderPipeline renderPipeline, WGPUStringView label);
alias WGPUProcRenderPipelineAddRef = void function(WGPURenderPipeline renderPipeline);
alias WGPUProcRenderPipelineRelease = void function(WGPURenderPipeline renderPipeline);

// Procs of Sampler
alias WGPUProcSamplerSetLabel = void function(WGPUSampler sampler, WGPUStringView label);
alias WGPUProcSamplerAddRef = void function(WGPUSampler sampler);
alias WGPUProcSamplerRelease = void function(WGPUSampler sampler);

// Procs of ShaderModule
alias WGPUProcShaderModuleGetCompilationInfo = WGPUFuture function(WGPUShaderModule shaderModule, WGPUCompilationInfoCallbackInfo callbackInfo);
alias WGPUProcShaderModuleSetLabel = void function(WGPUShaderModule shaderModule, WGPUStringView label);
alias WGPUProcShaderModuleAddRef = void function(WGPUShaderModule shaderModule);
alias WGPUProcShaderModuleRelease = void function(WGPUShaderModule shaderModule);

// Procs of SupportedFeatures
alias WGPUProcSupportedFeaturesFreeMembers = void function(WGPUSupportedFeatures supportedFeatures);

// Procs of SupportedWGSLLanguageFeatures
alias WGPUProcSupportedWGSLLanguageFeaturesFreeMembers = void function(WGPUSupportedWGSLLanguageFeatures supportedWGSLLanguageFeatures);

// Procs of Surface
alias WGPUProcSurfaceConfigure = void function(WGPUSurface surface, const(WGPUSurfaceConfiguration)* config);
alias WGPUProcSurfaceGetCapabilities = WGPUStatus function(WGPUSurface surface, WGPUAdapter adapter, WGPUSurfaceCapabilities* capabilities);
alias WGPUProcSurfaceGetCurrentTexture = void function(WGPUSurface surface, WGPUSurfaceTexture* surfaceTexture);
alias WGPUProcSurfacePresent = WGPUStatus function (WGPUSurface surface);
alias WGPUProcSurfaceSetLabel = void function(WGPUSurface surface, WGPUStringView label);
alias WGPUProcSurfaceUnconfigure = void function(WGPUSurface surface);
alias WGPUProcSurfaceAddRef = void function(WGPUSurface surface);
alias WGPUProcSurfaceRelease = void function(WGPUSurface surface);

// Procs of SurfaceCapabilities
alias WGPUProcSurfaceCapabilitiesFreeMembers = void function(WGPUSurfaceCapabilities surfaceCapabilities);

// Procs of Texture
alias WGPUProcTextureCreateView = WGPUTextureView function(WGPUTexture texture, const(WGPUTextureViewDescriptor)* descriptor);
alias WGPUProcTextureDestroy = void function(WGPUTexture texture);
alias WGPUProcTextureGetDepthOrArrayLayers = uint function(WGPUTexture texture);
alias WGPUProcTextureGetDimension = WGPUTextureDimension function(WGPUTexture texture);
alias WGPUProcTextureGetFormat = WGPUTextureFormat function(WGPUTexture texture);
alias WGPUProcTextureGetHeight = uint function(WGPUTexture texture);
alias WGPUProcTextureGetMipLevelCount = uint function(WGPUTexture texture);
alias WGPUProcTextureGetSampleCount = uint function(WGPUTexture texture);
alias WGPUProcTextureGetUsage = WGPUTextureUsage function(WGPUTexture texture);
alias WGPUProcTextureGetWidth = uint function(WGPUTexture texture);
alias WGPUProcTextureSetLabel = void function(WGPUTexture texture, WGPUStringView label);
alias WGPUProcTextureAddRef = void function(WGPUTexture texture);
alias WGPUProcTextureRelease = void function(WGPUTexture texture);

// Procs of TextureView
alias WGPUProcTextureViewSetLabel = void function(WGPUTextureView textureView, WGPUStringView label);
alias WGPUProcTextureViewAddRef = void function(WGPUTextureView textureView);
alias WGPUProcTextureViewRelease = void function(WGPUTextureView textureView);
