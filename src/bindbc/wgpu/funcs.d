/*
Copyright (c) 2019-2020 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module bindbc.wgpu.funcs;

import core.stdc.stdint;
import bindbc.wgpu.types;

__gshared
{
    extern(C) @nogc nothrow:
    
    alias da_wgpu_adapter_destroy = void function(WGPUAdapterId adapter_id);
    da_wgpu_adapter_destroy wgpu_adapter_destroy;
    
    alias da_wgpu_adapter_features = WGPUFeatures function(WGPUAdapterId adapter_id);
    da_wgpu_adapter_features wgpu_adapter_features;

    alias da_wgpu_adapter_get_info = void function(WGPUAdapterId adapter_id, WGPUCAdapterInfo *info);
    da_wgpu_adapter_get_info wgpu_adapter_get_info;

    alias da_wgpu_adapter_limits = WGPUCLimits function(WGPUAdapterId adapter_id);
    da_wgpu_adapter_limits wgpu_adapter_limits;

    alias da_wgpu_adapter_request_device = WGPUDeviceId function(WGPUAdapterId adapter_id, 
                                                                 WGPUFeatures features,
                                                                 const(WGPUCLimits)* limits,
                                                                 ubyte shader_validation,
                                                                 const(char)* trace_path);
    da_wgpu_adapter_request_device wgpu_adapter_request_device;
    
    alias da_wgpu_bind_group_destroy = void function(WGPUBindGroupId bind_group_id);
    da_wgpu_bind_group_destroy wgpu_bind_group_destroy;
    
    alias da_wgpu_bind_group_layout_destroy = void function(WGPUBindGroupLayoutId bind_group_layout_id);
    da_wgpu_bind_group_layout_destroy wgpu_bind_group_layout_destroy;
    
    alias da_wgpu_buffer_destroy = void function(WGPUBufferId buffer_id);
    da_wgpu_buffer_destroy wgpu_buffer_destroy;
    
    alias da_wgpu_buffer_get_mapped_range = ubyte* function(WGPUBufferId buffer_id,
                                                            WGPUBufferAddress start,
                                                            WGPUBufferSize size);
    da_wgpu_buffer_get_mapped_range wgpu_buffer_get_mapped_range;
    
    alias da_wgpu_buffer_map_read_async = void function(WGPUBufferId buffer_id,
                                                        WGPUBufferAddress start, 
                                                        WGPUBufferAddress size, 
                                                        WGPUBufferMapCallback callback, 
                                                        ubyte* userdata);
    da_wgpu_buffer_map_read_async wgpu_buffer_map_read_async;
    
    alias da_wgpu_buffer_map_write_async = void function(WGPUBufferId buffer_id,
                                                         WGPUBufferAddress start,
                                                         WGPUBufferAddress size,
                                                         WGPUBufferMapCallback callback,
                                                         ubyte* userdata);
    da_wgpu_buffer_map_write_async wgpu_buffer_map_write_async;
    
    alias da_wgpu_buffer_unmap = void function(WGPUBufferId buffer_id);
    da_wgpu_buffer_unmap wgpu_buffer_unmap;
    
    alias da_wgpu_command_buffer_destroy = void function(WGPUCommandBufferId command_buffer_id);
    da_wgpu_command_buffer_destroy wgpu_command_buffer_destroy;
    
    /**
     * # Safety
     *
     * This function is unsafe because improper use may lead to memory
     * problems. For example, a double-free may occur if the function is called
     * twice on the same raw pointer.
     */
    alias da_wgpu_command_encoder_begin_compute_pass = WGPUComputePass* function(WGPUCommandEncoderId encoder_id,
                                                                                 const WGPUComputePassDescriptor *_desc);
    da_wgpu_command_encoder_begin_compute_pass wgpu_command_encoder_begin_compute_pass;
    
    
    /**
     * # Safety
     *
     * This function is unsafe because improper use may lead to memory
     * problems. For example, a double-free may occur if the function is called
     * twice on the same raw pointer.
     */
    alias da_wgpu_command_encoder_begin_render_pass = WGPURenderPass* function(WGPUCommandEncoderId encoder_id,
                                                                               const WGPURenderPassDescriptor *desc);
    da_wgpu_command_encoder_begin_render_pass wgpu_command_encoder_begin_render_pass;
    
    alias da_wgpu_command_encoder_copy_buffer_to_buffer = void function(WGPUCommandEncoderId command_encoder_id,
                                                                        WGPUBufferId source,
                                                                        WGPUBufferAddress source_offset,
                                                                        WGPUBufferId destination,
                                                                        WGPUBufferAddress destination_offset,
                                                                        WGPUBufferAddress size);
    da_wgpu_command_encoder_copy_buffer_to_buffer wgpu_command_encoder_copy_buffer_to_buffer;
    
    alias da_wgpu_command_encoder_copy_buffer_to_texture = void function(WGPUCommandEncoderId command_encoder_id,
                                                                         const(WGPUBufferCopyView)* source,
                                                                         const(WGPUTextureCopyView)* destination,
                                                                         const(WGPUExtent3d)* copy_size);
    da_wgpu_command_encoder_copy_buffer_to_texture wgpu_command_encoder_copy_buffer_to_texture;
    
    alias da_wgpu_command_encoder_copy_texture_to_buffer = void function(WGPUCommandEncoderId command_encoder_id,
                                                                         const(WGPUTextureCopyView)* source,
                                                                         const(WGPUBufferCopyView)* destination,
                                                                         const(WGPUExtent3d)* copy_size);
    da_wgpu_command_encoder_copy_texture_to_buffer wgpu_command_encoder_copy_texture_to_buffer;
    
    alias da_wgpu_command_encoder_copy_texture_to_texture = void function(WGPUCommandEncoderId command_encoder_id,
                                                                          const(WGPUTextureCopyView)* source,
                                                                          const(WGPUTextureCopyView)* destination,
                                                                          const(WGPUExtent3d)* copy_size);
    da_wgpu_command_encoder_copy_texture_to_texture wgpu_command_encoder_copy_texture_to_texture;
    
    alias da_wgpu_command_encoder_destroy = void function(WGPUCommandEncoderId command_encoder_id);
    da_wgpu_command_encoder_destroy wgpu_command_encoder_destroy;
    
    alias da_wgpu_command_encoder_finish = WGPUCommandBufferId function(WGPUCommandEncoderId encoder_id,
                                                                        const(WGPUCommandBufferDescriptor)* desc);
    da_wgpu_command_encoder_finish wgpu_command_encoder_finish;
    
    alias da_wgpu_compute_pass_destroy = void function(WGPUComputePass* pass);
    da_wgpu_compute_pass_destroy wgpu_compute_pass_destroy;
    
    alias da_wgpu_compute_pass_dispatch = void function(WGPUComputePass* pass, 
                                                        uint groups_x, 
                                                        uint groups_y, 
                                                        uint groups_z);
    da_wgpu_compute_pass_dispatch wgpu_compute_pass_dispatch;
    
    alias da_wgpu_compute_pass_dispatch_indirect = void function(WGPUComputePass* pass,
                                                                 WGPUBufferId buffer_id,
                                                                 WGPUBufferAddress offset);
    da_wgpu_compute_pass_dispatch_indirect wgpu_compute_pass_dispatch_indirect;
    
    alias da_wgpu_compute_pass_end_pass = void function(WGPUComputePass* pass_id);
    da_wgpu_compute_pass_end_pass wgpu_compute_pass_end_pass;
    
    alias da_wgpu_compute_pass_insert_debug_marker = void function(WGPUComputePass* _pass, WGPURawString _label, uint color);
    da_wgpu_compute_pass_insert_debug_marker wgpu_compute_pass_insert_debug_marker;
    
    alias da_wgpu_compute_pass_pop_debug_group = void function(WGPUComputePass* _pass);
    da_wgpu_compute_pass_pop_debug_group wgpu_compute_pass_pop_debug_group;
    
    alias da_wgpu_compute_pass_push_debug_group = void function(WGPUComputePass* _pass, WGPURawString _label, uint color);
    da_wgpu_compute_pass_push_debug_group wgpu_compute_pass_push_debug_group;
    
    /**
     * # Safety
     *
     * This function is unsafe as there is no guarantee that the given pointer is
     * valid for `offset_length` elements.
     */
    alias da_wgpu_compute_pass_set_bind_group = void function(WGPUComputePass* pass,
                                                              uint index,
                                                              WGPUBindGroupId bind_group_id,
                                                              const(WGPUDynamicOffset)* offsets,
                                                              uintptr_t offsets_length);
    da_wgpu_compute_pass_set_bind_group wgpu_compute_pass_set_bind_group;
    
    alias da_wgpu_compute_pass_set_pipeline = void function(WGPUComputePass* pass, WGPUComputePipelineId pipeline_id);
    da_wgpu_compute_pass_set_pipeline wgpu_compute_pass_set_pipeline;
    
    version(Android)
    {
        alias da_wgpu_create_surface_from_android = WGPUSurfaceId function(void* a_native_window);
        da_wgpu_create_surface_from_android wgpu_create_surface_from_android;
    }
    
    version(OSX)
    {
        alias da_wgpu_create_surface_from_metal_layer = WGPUSurfaceId function(void* layer);
        da_wgpu_create_surface_from_metal_layer wgpu_create_surface_from_metal_layer;
    }
    
    version(linux)
    {
        alias da_wgpu_create_surface_from_wayland = WGPUSurfaceId function(void* surface, void* display);
        da_wgpu_create_surface_from_wayland wgpu_create_surface_from_wayland;
    }
    
    version(Windows)
    {
        alias da_wgpu_create_surface_from_windows_hwnd = WGPUSurfaceId function(void* _hinstance, void* hwnd);
        da_wgpu_create_surface_from_windows_hwnd wgpu_create_surface_from_windows_hwnd;
    }
    
    version(linux)
    {
        alias da_wgpu_create_surface_from_xlib = WGPUSurfaceId function(const void** display, ulong window);
        da_wgpu_create_surface_from_xlib wgpu_create_surface_from_xlib;
    }
    
    alias da_wgpu_device_create_bind_group = WGPUBindGroupId function(WGPUDeviceId device_id, 
                                                                      const WGPUBindGroupDescriptor* desc);
    da_wgpu_device_create_bind_group wgpu_device_create_bind_group;
    
    alias da_wgpu_device_create_bind_group_layout = WGPUBindGroupLayoutId function(WGPUDeviceId device_id, 
                                                                                   const WGPUBindGroupLayoutDescriptor* desc);
    da_wgpu_device_create_bind_group_layout wgpu_device_create_bind_group_layout;
    
    alias da_wgpu_device_create_buffer = WGPUBufferId function(WGPUDeviceId device_id, const WGPUBufferDescriptor* desc);
    da_wgpu_device_create_buffer wgpu_device_create_buffer;
    
    alias da_wgpu_device_create_command_encoder = WGPUCommandEncoderId function(WGPUDeviceId device_id,
                                                                                const(WGPUCommandEncoderDescriptor)* desc);
    da_wgpu_device_create_command_encoder wgpu_device_create_command_encoder;
    
    alias da_wgpu_device_create_compute_pipeline = WGPUComputePipelineId function(WGPUDeviceId device_id,
                                                                                  const(WGPUComputePipelineDescriptor)* desc);
    da_wgpu_device_create_compute_pipeline wgpu_device_create_compute_pipeline;
    
    alias da_wgpu_device_create_pipeline_layout = WGPUPipelineLayoutId function(WGPUDeviceId device_id,
                                                                                const(WGPUPipelineLayoutDescriptor)* desc);
    da_wgpu_device_create_pipeline_layout wgpu_device_create_pipeline_layout;
    
    alias da_wgpu_device_create_render_bundle_encoder = WGPURenderBundleEncoderId function(WGPUDeviceId device_id,
                                                                                           const WGPURenderBundleEncoderDescriptor *desc);
    da_wgpu_device_create_render_bundle_encoder wgpu_device_create_render_bundle_encoder;
    
    alias da_wgpu_device_create_render_pipeline = WGPURenderPipelineId function(WGPUDeviceId device_id,
                                                                                const(WGPURenderPipelineDescriptor)* desc);
    da_wgpu_device_create_render_pipeline wgpu_device_create_render_pipeline;
    
    alias da_wgpu_device_create_sampler = WGPUSamplerId function(WGPUDeviceId device_id, const(WGPUSamplerDescriptor)* desc);
    da_wgpu_device_create_sampler wgpu_device_create_sampler;
    
    alias da_wgpu_device_create_shader_module = WGPUShaderModuleId function(WGPUDeviceId device_id,
                                                                            WGPUShaderSource source);
    da_wgpu_device_create_shader_module wgpu_device_create_shader_module;
    
    alias da_wgpu_device_create_swap_chain = WGPUSwapChainId function(WGPUDeviceId device_id,
                                                                      WGPUSurfaceId surface_id,
                                                                      const(WGPUSwapChainDescriptor)* desc);
    da_wgpu_device_create_swap_chain wgpu_device_create_swap_chain;
    
    alias da_wgpu_device_create_texture = WGPUTextureId function(WGPUDeviceId device_id, const(WGPUTextureDescriptor)* desc);
    da_wgpu_device_create_texture wgpu_device_create_texture;

    alias da_wgpu_device_destroy = void function(WGPUDeviceId device_id);
    da_wgpu_device_destroy wgpu_device_destroy;
    
    alias da_wgpu_device_features = WGPUFeatures function(WGPUDeviceId device_id);
    da_wgpu_device_features wgpu_device_features;

    alias da_wgpu_device_get_default_queue = WGPUQueueId function(WGPUDeviceId device_id);
    da_wgpu_device_get_default_queue wgpu_device_get_default_queue;
    
    alias da_wgpu_device_limits = WGPUCLimits function(WGPUDeviceId device_id);
    da_wgpu_device_limits wgpu_device_limits;
    
    alias da_wgpu_device_poll = void function(WGPUDeviceId device_id, ubyte force_wait);
    da_wgpu_device_poll wgpu_device_poll;
    
    alias da_wgpu_get_version = uint function();
    da_wgpu_get_version wgpu_get_version;
    
    alias da_wgpu_pipeline_layout_destroy = void function(WGPUPipelineLayoutId pipeline_layout_id);
    da_wgpu_pipeline_layout_destroy wgpu_pipeline_layout_destroy;
    
    /**
     * # Safety
     *
     * This function is unsafe as there is no guarantee that the given pointer is
     * valid for `command_buffers_length` elements.
     */
    alias da_wgpu_queue_submit = void function(WGPUQueueId queue_id,
                                               const WGPUCommandBufferId* command_buffers,
                                               uintptr_t command_buffers_length);
    da_wgpu_queue_submit wgpu_queue_submit;
    
    /**
     * # Safety
     *
     * This function is unsafe as there is no guarantee that the given `data`
     * pointer is valid for `data_length` elements.
     */
    alias da_wgpu_queue_write_buffer = void function(WGPUQueueId queue_id,
                                                     WGPUBufferId buffer_id,
                                                     WGPUBufferAddress buffer_offset,
                                                     const(ubyte)* data,
                                                     uintptr_t data_length);
    da_wgpu_queue_write_buffer wgpu_queue_write_buffer;
    
    /**
     * # Safety
     *
     * This function is unsafe as there is no guarantee that the given `data`
     * pointer is valid for `data_length` elements.
     */
    alias da_wgpu_queue_write_texture = void function(WGPUQueueId queue_id,
                                                      const(WGPUTextureCopyView)* texture,
                                                      const(ubyte)* data,
                                                      uintptr_t data_length,
                                                      const(WGPUTextureDataLayout)* data_layout,
                                                      const(WGPUExtent3d)* size);
    da_wgpu_queue_write_texture wgpu_queue_write_texture;
    
    alias da_wgpu_render_bundle_destroy = void function(WGPURenderBundleId render_bundle_id);
    da_wgpu_render_bundle_destroy wgpu_render_bundle_destroy;

    alias da_wgpu_render_bundle_draw = void function(WGPURenderBundleEncoder* bundle,
                                                     uint vertex_count,
                                                     uint instance_count,
                                                     uint first_vertex,
                                                     uint first_instance);
    da_wgpu_render_bundle_draw wgpu_render_bundle_draw;
    
    alias da_wgpu_render_bundle_draw_indexed = void function(WGPURenderBundleEncoder* bundle,
                                                             uint index_count,
                                                             uint instance_count,
                                                             uint first_index,
                                                             int base_vertex,
                                                             uint first_instance);
    da_wgpu_render_bundle_draw_indexed wgpu_render_bundle_draw_indexed;

    alias da_wgpu_render_bundle_draw_indirect = void function(WGPURenderBundleEncoder* bundle,
                                                              WGPUBufferId buffer_id,
                                                              WGPUBufferAddress offset);
    da_wgpu_render_bundle_draw_indirect wgpu_render_bundle_draw_indirect;

    alias da_wgpu_render_bundle_encoder_finish = WGPURenderBundleId function(WGPURenderBundleEncoderId bundle_encoder_id,
                                                                             const WGPURenderBundleDescriptor_Label* desc);
    da_wgpu_render_bundle_encoder_finish wgpu_render_bundle_encoder_finish;

    alias da_wgpu_render_bundle_insert_debug_marker = void function(WGPURenderBundleEncoder* _bundle, WGPURawString _label);
    da_wgpu_render_bundle_insert_debug_marker wgpu_render_bundle_insert_debug_marker;

    alias da_wgpu_render_bundle_pop_debug_group = void function(WGPURenderBundleEncoder* _bundle);
    da_wgpu_render_bundle_pop_debug_group wgpu_render_bundle_pop_debug_group;

    alias da_wgpu_render_bundle_push_debug_group = void function(WGPURenderBundleEncoder* _bundle, WGPURawString _label);
    da_wgpu_render_bundle_push_debug_group wgpu_render_bundle_push_debug_group;

    /**
     * # Safety
     *
     * This function is unsafe as there is no guarantee that the given pointer is
     * valid for `offset_length` elements.
     */
    alias da_wgpu_render_bundle_set_bind_group = void function(WGPURenderBundleEncoder* bundle,
                                                               uint index,
                                                               WGPUBindGroupId bind_group_id,
                                                               const(WGPUDynamicOffset)* offsets,
                                                               uintptr_t offset_length);
    da_wgpu_render_bundle_set_bind_group wgpu_render_bundle_set_bind_group;

    alias da_wgpu_render_bundle_set_index_buffer = void function(WGPURenderBundleEncoder* bundle,
                                                                 WGPUBufferId buffer_id,
                                                                 WGPUBufferAddress offset,
                                                                 WGPUBufferSize size);
    da_wgpu_render_bundle_set_index_buffer wgpu_render_bundle_set_index_buffer;

    alias da_wgpu_render_bundle_set_pipeline = void function(WGPURenderBundleEncoder* bundle,
                                                             WGPURenderPipelineId pipeline_id);
    da_wgpu_render_bundle_set_pipeline wgpu_render_bundle_set_pipeline;

    alias da_wgpu_render_bundle_set_vertex_buffer = void function(WGPURenderBundleEncoder* bundle,
                                                                  uint slot,
                                                                  WGPUBufferId buffer_id,
                                                                  WGPUBufferAddress offset,
                                                                  WGPUBufferSize size);
    da_wgpu_render_bundle_set_vertex_buffer wgpu_render_bundle_set_vertex_buffer;

    alias da_wgpu_render_pass_bundle_indexed_indirect = void function(WGPURenderBundleEncoder* bundle,
                                                                      WGPUBufferId buffer_id,
                                                                      WGPUBufferAddress offset);
    da_wgpu_render_pass_bundle_indexed_indirect wgpu_render_pass_bundle_indexed_indirect;

    alias da_wgpu_render_pass_destroy = void function(WGPURenderPass* pass);
    da_wgpu_render_pass_destroy wgpu_render_pass_destroy;

    alias da_wgpu_render_pass_draw = void function(WGPURenderPass* pass,
                                                   uint vertex_count,
                                                   uint instance_count,
                                                   uint first_vertex,
                                                   uint first_instance);
    da_wgpu_render_pass_draw wgpu_render_pass_draw;
    
    alias da_wgpu_render_pass_draw_indexed = void function(WGPURenderPass* pass,
                                                           uint index_count,
                                                           uint instance_count,
                                                           uint first_index,
                                                           int base_vertex,
                                                           uint first_instance);
    da_wgpu_render_pass_draw_indexed wgpu_render_pass_draw_indexed;
    
    alias da_wgpu_render_pass_draw_indexed_indirect = void function(WGPURenderPass* pass,
                                                                    WGPUBufferId buffer_id,
                                                                    WGPUBufferAddress offset);
    da_wgpu_render_pass_draw_indexed_indirect wgpu_render_pass_draw_indexed_indirect;
    
    alias da_wgpu_render_pass_draw_indirect = void function(WGPURenderPass* pass,
                                                            WGPUBufferId buffer_id,
                                                            WGPUBufferAddress offset);
    da_wgpu_render_pass_draw_indirect wgpu_render_pass_draw_indirect;
    
    /**
     * # Safety
     *
     * This function is unsafe because improper use may lead to memory
     * problems. For example, a double-free may occur if the function is called
     * twice on the same raw pointer.
     */
    alias da_wgpu_render_pass_end_pass = void function(WGPURenderPass* pass_id);
    da_wgpu_render_pass_end_pass wgpu_render_pass_end_pass;
    
    alias da_wgpu_render_pass_insert_debug_marker = void function(WGPURenderPass* _pass, 
                                                                  WGPURawString _label, 
                                                                  uint32_t color);
    da_wgpu_render_pass_insert_debug_marker wgpu_render_pass_insert_debug_marker;
    
    alias da_wgpu_render_pass_multi_draw_indexed_indirect = void function(WGPURenderPass *pass,
                                                                          WGPUBufferId buffer_id,
                                                                          WGPUBufferAddress offset,
                                                                          uint count);
    da_wgpu_render_pass_multi_draw_indexed_indirect wgpu_render_pass_multi_draw_indexed_indirect;

    alias da_wgpu_render_pass_multi_draw_indexed_indirect_count = void function(WGPURenderPass *pass,
                                                                                WGPUBufferId buffer_id,
                                                                                WGPUBufferAddress offset,
                                                                                WGPUBufferId count_buffer_id,
                                                                                WGPUBufferAddress count_buffer_offset,
                                                                                uint max_count);
    da_wgpu_render_pass_multi_draw_indexed_indirect_count wgpu_render_pass_multi_draw_indexed_indirect_count;

    alias da_wgpu_render_pass_multi_draw_indirect = void function(WGPURenderPass *pass,
                                                                  WGPUBufferId buffer_id,
                                                                  WGPUBufferAddress offset,
                                                                  uint count);
    da_wgpu_render_pass_multi_draw_indirect wgpu_render_pass_multi_draw_indirect;

    alias da_wgpu_render_pass_multi_draw_indirect_count = void function(WGPURenderPass *pass,
                                                                        WGPUBufferId buffer_id,
                                                                        WGPUBufferAddress offset,
                                                                        WGPUBufferId count_buffer_id,
                                                                        WGPUBufferAddress count_buffer_offset,
                                                                        uint max_count);
    da_wgpu_render_pass_multi_draw_indirect_count wgpu_render_pass_multi_draw_indirect_count;
    
    
    alias da_wgpu_render_pass_pop_debug_group = void function(WGPURenderPass* _pass);
    da_wgpu_render_pass_pop_debug_group wgpu_render_pass_pop_debug_group;
    
    alias da_wgpu_render_pass_push_debug_group = void function(WGPURenderPass* _pass, WGPURawString _label);
    da_wgpu_render_pass_push_debug_group wgpu_render_pass_push_debug_group;
    
    /**
     * # Safety
     *
     * This function is unsafe as there is no guarantee that the given pointer is
     * valid for `offset_length` elements.
     */
    alias da_wgpu_render_pass_set_bind_group = void function(WGPURenderPass* pass,
                                                             uint index,
                                                             WGPUBindGroupId bind_group_id,
                                                             const WGPUDynamicOffset* offsets,
                                                             uintptr_t offsets_length);
    da_wgpu_render_pass_set_bind_group wgpu_render_pass_set_bind_group;
    
    alias da_wgpu_render_pass_set_blend_color = void function(WGPURenderPass* pass, 
                                                              const WGPUColor* color);
    da_wgpu_render_pass_set_blend_color wgpu_render_pass_set_blend_color;
    
    alias da_wgpu_render_pass_set_index_buffer = void function(WGPURenderPass* pass,
                                                               WGPUBufferId buffer_id,
                                                               WGPUBufferAddress offset,
                                                               WGPUBufferSize size);
    da_wgpu_render_pass_set_index_buffer wgpu_render_pass_set_index_buffer;
    
    alias da_wgpu_render_pass_set_pipeline = void function(WGPURenderPass* pass, 
                                                           WGPURenderPipelineId pipeline_id);
    da_wgpu_render_pass_set_pipeline wgpu_render_pass_set_pipeline;
    
    alias da_wgpu_render_pass_set_scissor_rect = void function(WGPURenderPass *pass,
                                                               uint x,
                                                               uint y,
                                                               uint w,
                                                               uint h);
    da_wgpu_render_pass_set_scissor_rect wgpu_render_pass_set_scissor_rect;
    
    alias da_wgpu_render_pass_set_stencil_reference = void function(WGPURenderPass* pass, uint value);
    da_wgpu_render_pass_set_stencil_reference wgpu_render_pass_set_stencil_reference;
    
    alias da_wgpu_render_pass_set_vertex_buffer = void function(WGPURenderPass* pass,
                                                                uint slot,
                                                                WGPUBufferId buffer_id,
                                                                WGPUBufferAddress offset,
                                                                WGPUBufferSize size);
    da_wgpu_render_pass_set_vertex_buffer wgpu_render_pass_set_vertex_buffer;
    
    alias da_wgpu_render_pass_set_viewport = void function(WGPURenderPass* pass,
                                                           float x,
                                                           float y,
                                                           float w,
                                                           float h,
                                                           float depth_min,
                                                           float depth_max);
    da_wgpu_render_pass_set_viewport wgpu_render_pass_set_viewport;
    
    alias da_wgpu_render_pipeline_destroy = void function(WGPURenderPipelineId render_pipeline_id);
    da_wgpu_render_pipeline_destroy wgpu_render_pipeline_destroy;
    
    /**
     * # Safety
     *
     * This function is unsafe as it calls an unsafe extern callback.
     */
    alias da_wgpu_request_adapter_async = void function(const WGPURequestAdapterOptions *desc, 
                                                        WGPUBackendBit mask, 
                                                        ubyte allow_unsafe,
                                                        WGPURequestAdapterCallback callback, 
                                                        void* userdata);
    da_wgpu_request_adapter_async wgpu_request_adapter_async;

    alias da_wgpu_sampler_destroy = void function(WGPUSamplerId sampler_id);
    da_wgpu_sampler_destroy wgpu_sampler_destroy;
    
    alias da_wgpu_set_log_callback = void function(WGPULogCallback callback);
    da_wgpu_set_log_callback wgpu_set_log_callback;

    alias da_wgpu_set_log_level = int function(WGPULogLevel level);
    da_wgpu_set_log_level wgpu_set_log_level;
    
    alias da_wgpu_shader_module_destroy = void function(WGPUShaderModuleId shader_module_id);
    da_wgpu_shader_module_destroy wgpu_shader_module_destroy;

    alias da_wgpu_swap_chain_get_next_texture = WGPUSwapChainOutput function(WGPUSwapChainId swap_chain_id);
    da_wgpu_swap_chain_get_next_texture wgpu_swap_chain_get_next_texture;
    
    alias da_wgpu_swap_chain_present = void function(WGPUSwapChainId swap_chain_id);
    da_wgpu_swap_chain_present wgpu_swap_chain_present;
    
    alias da_wgpu_texture_create_view = WGPUTextureViewId function(WGPUTextureId texture_id, 
                                                                   const WGPUTextureViewDescriptor *desc);
    da_wgpu_texture_create_view wgpu_texture_create_view;
    
    alias da_wgpu_texture_destroy = void function(WGPUTextureId texture_id);
    da_wgpu_texture_destroy wgpu_texture_destroy;
    
    alias da_wgpu_texture_view_destroy = void function(WGPUTextureViewId texture_view_id);
    da_wgpu_texture_view_destroy wgpu_texture_view_destroy;
}
