/*
Copyright (c) 2019-2023 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module bindbc.wgpu.types2;

import bindbc.wgpu.types;

/*
 * Type definitions from wgpu.h
 */

enum WGPUNativeSType
{
    // Start at 6 to prevent collisions with webgpu STypes
    DeviceExtras = 0x60000001,
    AdapterExtras = 0x60000002,
    RequiredLimitsExtras = 0x60000003,
    PipelineLayoutExtras = 0x60000004,
    ShaderModuleGLSLDescriptor = 0x60000005,
    SupportedLimitsExtras = 0x60000003,
    InstanceExtras = 0x60000006,
    SwapChainDescriptorExtras = 0x60000007,
    Force32 = 0x7FFFFFFF
}

enum WGPUNativeFeature
{
    PushConstants = 0x60000001,
    TextureAdapterSpecificFormatFeatures = 0x60000002,
    MultiDrawIndirect = 0x60000003,
    MultiDrawIndirectCount = 0x60000004,
    VertexWritableStorage = 0x60000005,
    Force32 = 0x7FFFFFFF
}

enum WGPULogLevel
{
    Off = 0x00000000,
    Error = 0x00000001,
    Warn = 0x00000002,
    Info = 0x00000003,
    Debug = 0x00000004,
    Trace = 0x00000005,
    Force32 = 0x7FFFFFFF
}

enum WGPUInstanceBackend
{
    Vulkan = 1 << 1,
    GL = 1 << 5,
    Metal = 1 << 2,
    DX12 = 1 << 3,
    DX11 = 1 << 4,
    BrowserWebGPU = 1 << 6,
    Primary = WGPUInstanceBackend.Vulkan | WGPUInstanceBackend.Metal | WGPUInstanceBackend.DX12 | WGPUInstanceBackend.BrowserWebGPU,
    Secondary = WGPUInstanceBackend.GL | WGPUInstanceBackend.DX11,
    None = 0x00000000,
    Force32 = 0x7FFFFFFF
}

alias WGPUInstanceBackendFlags = uint;

enum WGPUDx12Compiler
{
    Undefined = 0x00000000,
    Fxc = 0x00000001,
    Dxc = 0x00000002,
    Force32 = 0x7FFFFFFF
}

enum WGPUCompositeAlphaMode
{
    Auto = 0x00000000,
    Opaque = 0x00000001,
    PreMultiplied = 0x00000002,
    PostMultiplied = 0x00000003,
    Inherit = 0x00000004,
    Force32 = 0x7FFFFFFF
}

struct WGPUInstanceExtras
{
    WGPUChainedStruct chain;
    WGPUInstanceBackendFlags backends;
    WGPUDx12Compiler dx12ShaderCompiler;
    const(char)* dxilPath;
    const(char)* dxcPath;
}

/*
struct WGPUAdapterExtras
{
    WGPUChainedStruct chain;
    WGPUBackendType backend;
}
*/

struct WGPUDeviceExtras
{
    WGPUChainedStruct chain;
    const(char)* tracePath;
}
struct WGPURequiredLimitsExtras
{
    WGPUChainedStruct chain;
    uint maxPushConstantSize;
}

struct WGPUSupportedLimitsExtras
{
    WGPUChainedStructOut chain;
    uint maxPushConstantSize;
}

struct WGPUPushConstantRange
{
    alias WGPUShaderStageFlags = uint;
    WGPUShaderStageFlags stages;
    uint start;
    uint end;
}

struct WGPUPipelineLayoutExtras
{
    WGPUChainedStruct chain;
    uint pushConstantRangeCount;
    WGPUPushConstantRange* pushConstantRanges;
}

alias WGPUSubmissionIndex = ulong;

struct WGPUWrappedSubmissionIndex
{
    WGPUQueue queue;
    WGPUSubmissionIndex submissionIndex;
}

struct WGPUShaderDefine
{
    const(char)* name;
    const(char)* value;
}

struct WGPUShaderModuleGLSLDescriptor
{
    WGPUChainedStruct chain;
    WGPUShaderStage stage;
    const(char)* code;
    uint defineCount;
    WGPUShaderDefine* defines;
}

struct WGPUStorageReport
{
    size_t numOccupied;
    size_t numVacant;
    size_t numError;
    size_t elementSize;
}

struct WGPUHubReport
{
    WGPUStorageReport adapters;
    WGPUStorageReport devices;
    WGPUStorageReport pipelineLayouts;
    WGPUStorageReport shaderModules;
    WGPUStorageReport bindGroupLayouts;
    WGPUStorageReport bindGroups;
    WGPUStorageReport commandBuffers;
    WGPUStorageReport renderBundles;
    WGPUStorageReport renderPipelines;
    WGPUStorageReport computePipelines;
    WGPUStorageReport querySets;
    WGPUStorageReport buffers;
    WGPUStorageReport textures;
    WGPUStorageReport textureViews;
    WGPUStorageReport samplers;
}

struct WGPUGlobalReport
{
    WGPUStorageReport surfaces;
    WGPUBackendType backendType;
    WGPUHubReport vulkan;
    WGPUHubReport metal;
    WGPUHubReport dx12;
    WGPUHubReport dx11;
    WGPUHubReport gl;
}

struct WGPUSurfaceCapabilities
{
    size_t formatCount;
    WGPUTextureFormat* formats;
    size_t presentModeCount;
    WGPUPresentMode* presentModes;
    size_t alphaModeCount;
    WGPUCompositeAlphaMode* alphaModes;
}

struct WGPUSwapChainDescriptorExtras
{
    WGPUChainedStruct chain;
    WGPUCompositeAlphaMode alphaMode;
    size_t viewFormatCount;
    const(WGPUTextureFormat)* viewFormats;
}

struct WGPUInstanceEnumerateAdapterOptions
{
    const(WGPUChainedStruct)* nextInChain;
    WGPUInstanceBackendFlags backends;
}

extern(C):

alias WGPULogCallback = void function (WGPULogLevel level, const(char)* message, void* userdata);

extern(C) @nogc nothrow:

alias WGPUProcGenerateReport = void function(WGPUInstance instance, WGPUGlobalReport* report);
alias WGPUProcInstanceEnumerateAdapters = size_t function(WGPUInstance instance, const(WGPUInstanceEnumerateAdapterOptions)* options, WGPUAdapter* adapters);
alias WGPUProcQueueSubmitForIndex = WGPUSubmissionIndex function(WGPUQueue queue, size_t commandCount, const(WGPUCommandBuffer)* commands);

// Returns true if the queue is empty, or false if there are more queue submissions still in flight.
alias WGPUProcDevicePoll = bool function(WGPUDevice device, bool wait, const(WGPUWrappedSubmissionIndex)* wrappedSubmissionIndex);

alias WGPUProcSetLogCallback = void function(WGPULogCallback callback, void* userdata);
alias WGPUProcSetLogLevel = void function(WGPULogLevel level);
alias WGPUProcGetVersion = uint function();
alias WGPUProcSurfaceGetCapabilities = void function(WGPUSurface surface, WGPUAdapter adapter, WGPUSurfaceCapabilities* capabilities);
alias WGPUProcRenderPassEncoderSetPushConstants = void function(WGPURenderPassEncoder encoder, WGPUShaderStageFlags stages, uint offset, uint sizeBytes, const(void)* data);
alias WGPUProcRenderPassEncoderMultiDrawIndirect = void function(WGPURenderPassEncoder encoder, WGPUBuffer buffer, ulong offset, uint count);
alias WGPUProcRenderPassEncoderMultiDrawIndexedIndirect = void function(WGPURenderPassEncoder encoder, WGPUBuffer buffer, ulong offset, uint count);
alias WGPUProcRenderPassEncoderMultiDrawIndirectCount = void function(WGPURenderPassEncoder encoder, WGPUBuffer buffer, ulong offset, WGPUBuffer count_buffer, ulong count_buffer_offset, uint max_count);
alias WGPUProcRenderPassEncoderMultiDrawIndexedIndirectCount = void function(WGPURenderPassEncoder encoder, WGPUBuffer buffer, ulong offset, WGPUBuffer count_buffer, ulong count_buffer_offset, uint max_count);
