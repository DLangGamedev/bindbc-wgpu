/*
Copyright (c) 2019-2025 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module main;

import core.stdc.stdlib;
import std.stdio;
import std.conv;
import std.math;
import std.random;
import std.string;
import std.file: readText;

import bindbc.wgpu;
import bindbc.sdl;
import loader = bindbc.loader.sharedlib;

void quit(string message = "")
{
    if (message.length)
        writeln(message);
    core.stdc.stdlib.exit(1);
}

void main(string[] args)
{
    auto wgpuSupport = loadWGPU();
    writeln("wgpuSupport: ", wgpuSupport);
    
    auto sdlSupport = loadSDL();
    writeln("sdlSupport: ", sdlSupport);
    
    if (loader.errors.length)
    {
        writeln("Loader errors:");
        foreach(info; loader.errors)
        {
            writeln(to!string(info.error), ": ", to!string(info.message));
        }
    }
    
    version(OSX)
    {
        SDL_SetHint(SDL_HINT_RENDER_DRIVER, toStringz("metal"));
    }
    
    if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
        quit("Error: failed to init SDL: " ~ to!string(SDL_GetError()));
    writeln("SDL OK");

    debug
    {
        WGPULogLevel logLevel = WGPULogLevel.Debug; // WGPULogLevel.Trace
    }
    else
    {
        WGPULogLevel logLevel = WGPULogLevel.Warn;
    }

    wgpuSetLogLevel(logLevel);
    wgpuSetLogCallback(&logCallback, null);
    writeln("Log OK");

    WGPUInstanceDescriptor instanceDesc;
    WGPUInstance instance = wgpuCreateInstance(&instanceDesc);
    assert(instance);
    writeln("Instance OK");
    
    uint winWidth = 1280;
    uint winHeight = 720;
    SDL_Window* sdlWindow = SDL_CreateWindow(toStringz("WebGPU Hello Triangle"),
        SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
        winWidth, winHeight,
        SDL_WINDOW_SHOWN | SDL_WINDOW_RESIZABLE);
    writeln("Window OK");
    
    SDL_SysWMinfo wmInfo;
    SDL_VERSION(&wmInfo.version_); 
    if(SDL_GetWindowWMInfo(sdlWindow, &wmInfo) != SDL_TRUE)
    {
        quit("Error: failed to init SDL: " ~ to!string(SDL_GetError()));
    }
    writeln("Subsystem: ", wmInfo.subsystem);
    WGPUSurface surface = createSurface(instance, sdlWindow, wmInfo);
    assert(surface);
    writeln("Surface OK");
    
    WGPUAdapter adapter;
    WGPURequestAdapterOptions adapterOpts = {
        nextInChain: null,
        featureLevel: WGPUFeatureLevel.Core,
        powerPreference: WGPUPowerPreference.HighPerformance,
        forceFallbackAdapter: false,
        backendType: WGPUBackendType.Vulkan,
        compatibleSurface: surface
    };
    WGPURequestAdapterCallbackInfo requestAdapterCallbackInfo = {
        nextInChain: null,
        mode: WGPUCallbackMode.WaitAnyOnly,
        callback: &requestAdapterCallback,
        userdata1: cast(void*)&adapter,
        userdata2: null
    };
    wgpuInstanceRequestAdapter(instance, &adapterOpts, requestAdapterCallbackInfo);
    assert(adapter);
    writeln("Adapter OK");
    
    WGPUDevice device;
    WGPUDeviceExtras deviceExtras = {
        chain: {
            next: null,
            sType: cast(WGPUSType)WGPUNativeSType.DeviceExtras
        }
    };
    WGPULimits limits = {
        nextInChain: null
    };
    WGPUQueueDescriptor defaultQueueDesc = {
        nextInChain: null,
        label: "DefaultQueue"
    };
    WGPUDeviceDescriptor deviceDesc = {
        nextInChain: cast(const(WGPUChainedStruct)*)&deviceExtras,
        label: "Device",
        requiredFeatureCount: 0,
        requiredFeatures: null,
        requiredLimits: &limits,
        defaultQueue: defaultQueueDesc,
        deviceLostCallback: null
    };
    WGPURequestDeviceCallbackInfo requestDeviceCallbackInfo = {
        nextInChain: null,
        mode: WGPUCallbackMode.WaitAnyOnly,
        callback: &requestDeviceCallback,
        userdata1: cast(void*)&device,
        userdata2: null
    };
    
    wgpuAdapterRequestDevice(adapter, &deviceDesc, requestDeviceCallbackInfo);
    assert(device);
    writeln("Device OK");
    
    WGPUQueue queue = wgpuDeviceGetQueue(device);
    assert(queue);
    writeln("Queue OK");
    
    string shaderText = readText("data/shader.wgsl");
    WGPUShaderSourceWGSL wgslDescriptor = {
        chain: {
            next: null,
            sType: WGPUSType.ShaderSourceWGSL
        },
        code: shaderText
    };
    WGPUShaderModuleDescriptor shaderSource = {
        nextInChain: cast(const(WGPUChainedStruct)*)&wgslDescriptor,
        label: "shader.wgsl"
    };
    WGPUShaderModule shaderModule = wgpuDeviceCreateShaderModule(device, &shaderSource);
    assert(shaderModule);
    writeln("Shader OK");
    
    WGPUBindGroupLayoutDescriptor bglDesc = {
        label: "bind group layout",
        entries: null,
        entryCount: 0
    };
    WGPUBindGroupLayout bindGroupLayout = wgpuDeviceCreateBindGroupLayout(device, &bglDesc);
    WGPUBindGroupDescriptor bgDesc = {
        label: "bind group",
        layout: bindGroupLayout,
        entries: null,
        entryCount: 0
    };
    assert(bindGroupLayout);
    WGPUBindGroup bindGroup = wgpuDeviceCreateBindGroup(device, &bgDesc);
    assert(bindGroup);
    WGPUBindGroupLayout[1] bindGroupLayouts = [ bindGroupLayout ];
    writeln("Bind group OK");
    
    WGPUPipelineLayoutDescriptor plDesc = {
        bindGroupLayouts: bindGroupLayouts.ptr,
        bindGroupLayoutCount: bindGroupLayouts.length
    };
    WGPUPipelineLayout pipelineLayout = wgpuDeviceCreatePipelineLayout(device, &plDesc);
    assert(pipelineLayout);
    writeln("Pipeline layout OK");
    
    WGPUSurfaceCapabilities surfaceCaps;
    wgpuSurfaceGetCapabilities(surface, adapter, &surfaceCaps);
    WGPUTextureFormat surfaceFormat = surfaceCaps.formats[0];
    writeln(surfaceFormat);
    
    WGPUBlendState blend = {
        color: {
            srcFactor: WGPUBlendFactor.One,
            dstFactor: WGPUBlendFactor.Zero,
            operation: WGPUBlendOperation.Add
        },
        alpha: {
            srcFactor: WGPUBlendFactor.One,
            dstFactor: WGPUBlendFactor.Zero,
            operation: WGPUBlendOperation.Add
        }
    };
    WGPUColorTargetState colorTarget = {
        format: surfaceFormat,
        blend: &blend,
        writeMask: WGPUColorWriteMask.All
    };
    WGPUFragmentState fs = {
        module_: shaderModule,
        entryPoint: "fs_main",
        targetCount: 1,
        targets: &colorTarget
    };
    WGPURenderPipelineDescriptor rpDesc = {
        label: "Render pipeline",
        layout: pipelineLayout,
        vertex: {
            module_: shaderModule,
            entryPoint: "vs_main",
            bufferCount: 0,
            buffers: null
        },
        primitive: {
            topology: WGPUPrimitiveTopology.TriangleList,
            stripIndexFormat: WGPUIndexFormat.Undefined,
            frontFace: WGPUFrontFace.CCW,
            cullMode: WGPUCullMode.None
        },
        multisample: {
            count: 1,
            mask: ~0,
            alphaToCoverageEnabled: false
        },
        fragment: &fs,
        depthStencil: null
    };
    WGPURenderPipeline pipeline = wgpuDeviceCreateRenderPipeline(device, &rpDesc);
    assert(pipeline);
    writeln("Render pipeline OK");
    
    void configureSurface(uint w, uint h) {
        WGPUSurfaceConfiguration config = {
            nextInChain: null,
            device: device,
            format: surfaceFormat,
            usage: WGPUTextureUsage.RenderAttachment,
            viewFormatCount: 0,
            viewFormats: null,
            alphaMode: surfaceCaps.alphaModes[0],
            width: w,
            height: h,
            presentMode: WGPUPresentMode.Fifo
        };
        wgpuSurfaceConfigure(surface, &config);
    }

    configureSurface(winWidth, winHeight);
    
    bool running = true;
    while(running)
    {
        SDL_Event event;
        while(SDL_PollEvent(&event))
        {
            switch (event.type)
            {
                case SDL_WINDOWEVENT:
                    if (event.window.event == SDL_WINDOWEVENT_SIZE_CHANGED)
                    {
                        winWidth = event.window.data1;
                        winHeight = event.window.data2;
                        writeln("Resize: ", winWidth, "x", winHeight);
                        configureSurface(winWidth, winHeight);
                    }
                    break;
                case SDL_KEYUP:
                    const key = event.key.keysym.scancode;
                    if (key == 41) // Esc
                    {
                        running = false;
                    }
                    break;
                case SDL_QUIT:
                    running = false;
                    break;
                default:
                    break;
            }
        }
        
        // wgpu crashes when rendering to minimized window
        auto winFlags = SDL_GetWindowFlags(sdlWindow);
        auto isMinimized = winFlags & SDL_WINDOW_MINIMIZED;
        if (isMinimized)
            continue;
        
        WGPUSurfaceTexture surfaceTexture;
        wgpuSurfaceGetCurrentTexture(surface, &surfaceTexture);
        switch(surfaceTexture.status)
        {
            case WGPUSurfaceGetCurrentTextureStatus.SuccessOptimal,
                 WGPUSurfaceGetCurrentTextureStatus.SuccessSuboptimal:
                // All good
                break;
            case WGPUSurfaceGetCurrentTextureStatus.Timeout,
                 WGPUSurfaceGetCurrentTextureStatus.Outdated,
                 WGPUSurfaceGetCurrentTextureStatus.Lost:
                // Skip this frame, and re-configure surface
                if (surfaceTexture.texture !is null)
                    wgpuTextureRelease(surfaceTexture.texture);
                configureSurface(winWidth, winHeight);
                continue;
            default:
                // Fatal error
                writeln("Error: surfaceTexture.status = ", surfaceTexture.status);
                running = false;
                continue;
        }
        
        assert(surfaceTexture.texture);
        
        WGPUTextureView frame = wgpuTextureCreateView(surfaceTexture.texture, null);
        assert(frame);
        
        WGPUCommandEncoderDescriptor ceDesc = {
            label: "Command Encoder"
        };
        WGPUCommandEncoder commEncoder = wgpuDeviceCreateCommandEncoder(device, &ceDesc);
        assert(commEncoder);
        
        WGPURenderPassColorAttachment colorAttachment = {
            view: frame,
            depthSlice: WGPU_DEPTH_SLICE_UNDEFINED,
            resolveTarget: null,
            loadOp: WGPULoadOp.Clear,
            storeOp: WGPUStoreOp.Store,
            clearValue: WGPUColor(0.5, 0.5, 0.5, 1.0)
        };
        WGPURenderPassDescriptor passDesc = {
            colorAttachments: &colorAttachment,
            colorAttachmentCount: 1,
            depthStencilAttachment: null
        };
        WGPURenderPassEncoder renderPass = wgpuCommandEncoderBeginRenderPass(commEncoder, &passDesc);
        assert(renderPass);
        
        wgpuRenderPassEncoderSetPipeline(renderPass, pipeline);
        wgpuRenderPassEncoderSetBindGroup(renderPass, 0, bindGroup, 0, null);
        wgpuRenderPassEncoderDraw(renderPass, 3, 1, 0, 0);
        wgpuRenderPassEncoderEnd(renderPass);
        wgpuRenderPassEncoderRelease(renderPass);
        
        WGPUCommandBufferDescriptor cmdbufDesc = { label: null };
        WGPUCommandBuffer cmdBuffer = wgpuCommandEncoderFinish(commEncoder, &cmdbufDesc);
        assert(cmdBuffer);

        wgpuQueueSubmit(queue, 1, &cmdBuffer);
        wgpuSurfacePresent(surface);

        wgpuCommandBufferRelease(cmdBuffer);
        wgpuCommandEncoderRelease(commEncoder);
        wgpuTextureViewRelease(frame);
        wgpuTextureRelease(surfaceTexture.texture);
    }
    
    wgpuRenderPipelineRelease(pipeline);
    wgpuPipelineLayoutRelease(pipelineLayout);
    wgpuShaderModuleRelease(shaderModule);
    wgpuSurfaceCapabilitiesFreeMembers(surfaceCaps);
    wgpuQueueRelease(queue);
    wgpuDeviceRelease(device);
    wgpuAdapterRelease(adapter);
    wgpuSurfaceRelease(surface);
    wgpuInstanceRelease(instance);
    SDL_Quit();
}

WGPUSurface createSurface(WGPUInstance instance, SDL_Window* window, SDL_SysWMinfo wmInfo)
{
    WGPUSurface surface;
    version(Windows)
    {
        if (wmInfo.subsystem == SDL_SYSWM_WINDOWS)
        {
            auto win_hwnd = wmInfo.info.win.window;
            auto win_hinstance = wmInfo.info.win.hinstance;
            
            WGPUSurfaceSourceWindowsHWND surfaceSrc = {
                chain: {
                    next: null,
                    sType: WGPUSType.SurfaceSourceWindowsHWND
                },
                hinstance: win_hinstance,
                hwnd: win_hwnd
            };
            
            WGPUSurfaceDescriptor sfd = {
                label: null,
                nextInChain: cast(const(WGPUChainedStruct)*)&surfaceSrc
            };
            surface = wgpuInstanceCreateSurface(instance, &sfd);
        }
        else
        {
            quit("Unsupported subsystem, sorry");
        }
    }
    else version(linux)
    {
        if (wmInfo.subsystem == SDL_SYSWM_WAYLAND)
        {
            auto waylandDisplay = wmInfo.info.wl.wl_display;
            auto waylandSurface = wmInfo.info.wl.wl_surface;
            
            WGPUSurfaceSourceWaylandSurface surfaceSrc = {
                chain: {
                    next: null,
                    sType: WGPUSType.SurfaceSourceWaylandSurface
                },
                display: waylandDisplay,
                surface: waylandSurface
            };
            
            WGPUSurfaceDescriptor sfd = {
                label: null,
                nextInChain: cast(const(WGPUChainedStruct)*)&surfaceSrc
            };
            surface = wgpuInstanceCreateSurface(instance, &sfd);
        }
        else
        {
           /*
            * Just try to create X11 surface and hope for the best.
            * System might use XCB, so wmInfo.subsystem will contain SDL_SYSWM_UNKNOWN.
            */
            auto x11_display = wmInfo.info.x11.display;
            auto x11_window = wmInfo.info.x11.window;
            
            WGPUSurfaceSourceXlibWindow surfaceSrc = {
                chain: {
                    next: null,
                    sType: WGPUSType.SurfaceSourceXlibWindow
                },
                display: x11_display,
                window: x11_window
            };
            
            WGPUSurfaceDescriptor sfd = {
                label: null,
                nextInChain: cast(const(WGPUChainedStruct)*)&surfaceSrc
            };
            surface = wgpuInstanceCreateSurface(instance, &sfd);
        }
    }
    else version(OSX)
    {
        SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_PRESENTVSYNC);
        auto metalLayer = SDL_RenderGetMetalLayer(renderer);
        
        WGPUSurfaceSourceMetalLayer surfaceSrc = {
            chain: {
                next: null,
                sType: WGPUSType.SurfaceSourceMetalLayer
            },
            layer: metalLayer
        };
        WGPUSurfaceDescriptor sfd = {
            label: null,
            nextInChain: cast(const(WGPUChainedStruct)*)&surfaceSrc
        };
        surface = wgpuInstanceCreateSurface(instance, &sfd);
        
        SDL_DestroyRenderer(renderer);
    }
    return surface;
}

extern(C)
{
    void logCallback(WGPULogLevel level, WGPUStringView message, void* userdata)
    {
        const(char)[] level_message;
        switch(level)
        {
            case WGPULogLevel.Off: level_message = "off"; break;
            case WGPULogLevel.Error: level_message = "error"; break;
            case WGPULogLevel.Warn: level_message = "warn"; break;
            case WGPULogLevel.Info: level_message = "info"; break;
            case WGPULogLevel.Debug: level_message = "debug"; break;
            case WGPULogLevel.Trace: level_message = "trace"; break;
            default: level_message = "-"; break;
        }
        writeln("WebGPU ", level_message, ": ", message);
    }

    void requestAdapterCallback(WGPURequestAdapterStatus status, void* adapter, WGPUStringView message, void* userdata1, void* userdata2)
    {
        if (status == WGPURequestAdapterStatus.Success)
            *cast(WGPUAdapter*)userdata1 = adapter;
        else
        {
            writeln(status);
            writeln(message);
        }
    }

    void requestDeviceCallback(WGPURequestDeviceStatus status, WGPUDevice device, WGPUStringView message, void* userdata1, void* userdata2)
    {
        if (status == WGPURequestDeviceStatus.Success)
            *cast(WGPUDevice*)userdata1 = device;
        else
        {
            writeln(status);
            writeln(message);
        }
    }
}
